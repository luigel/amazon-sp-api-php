<?php
/**
 * TransportationOption
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.61
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound;

use \ArrayAccess;
use Luigel\AmazonSellingPartnerAPI\ObjectSerializer;

/**
 * TransportationOption Class Doc Comment
 *
 * @category Class
 * @description Contains information pertaining to a transportation option and the related carrier.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransportationOption implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransportationOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'carrier' => '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\Carrier',
        'carrier_appointment' => '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CarrierAppointment',
        'preconditions' => 'string[]',
        'quote' => '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\Quote',
        'shipment_id' => 'string',
        'shipping_mode' => 'string',
        'shipping_solution' => 'string',
        'transportation_option_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'carrier' => null,
        'carrier_appointment' => null,
        'preconditions' => null,
        'quote' => null,
        'shipment_id' => null,
        'shipping_mode' => null,
        'shipping_solution' => null,
        'transportation_option_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'carrier' => 'carrier',
        'carrier_appointment' => 'carrierAppointment',
        'preconditions' => 'preconditions',
        'quote' => 'quote',
        'shipment_id' => 'shipmentId',
        'shipping_mode' => 'shippingMode',
        'shipping_solution' => 'shippingSolution',
        'transportation_option_id' => 'transportationOptionId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'carrier' => 'setCarrier',
        'carrier_appointment' => 'setCarrierAppointment',
        'preconditions' => 'setPreconditions',
        'quote' => 'setQuote',
        'shipment_id' => 'setShipmentId',
        'shipping_mode' => 'setShippingMode',
        'shipping_solution' => 'setShippingSolution',
        'transportation_option_id' => 'setTransportationOptionId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'carrier' => 'getCarrier',
        'carrier_appointment' => 'getCarrierAppointment',
        'preconditions' => 'getPreconditions',
        'quote' => 'getQuote',
        'shipment_id' => 'getShipmentId',
        'shipping_mode' => 'getShippingMode',
        'shipping_solution' => 'getShippingSolution',
        'transportation_option_id' => 'getTransportationOptionId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['carrier'] = isset($data['carrier']) ? $data['carrier'] : null;
        $this->container['carrier_appointment'] = isset($data['carrier_appointment']) ? $data['carrier_appointment'] : null;
        $this->container['preconditions'] = isset($data['preconditions']) ? $data['preconditions'] : null;
        $this->container['quote'] = isset($data['quote']) ? $data['quote'] : null;
        $this->container['shipment_id'] = isset($data['shipment_id']) ? $data['shipment_id'] : null;
        $this->container['shipping_mode'] = isset($data['shipping_mode']) ? $data['shipping_mode'] : null;
        $this->container['shipping_solution'] = isset($data['shipping_solution']) ? $data['shipping_solution'] : null;
        $this->container['transportation_option_id'] = isset($data['transportation_option_id']) ? $data['transportation_option_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['carrier'] === null) {
            $invalidProperties[] = "'carrier' can't be null";
        }
        if ($this->container['preconditions'] === null) {
            $invalidProperties[] = "'preconditions' can't be null";
        }
        if ($this->container['shipment_id'] === null) {
            $invalidProperties[] = "'shipment_id' can't be null";
        }
        if ($this->container['shipping_mode'] === null) {
            $invalidProperties[] = "'shipping_mode' can't be null";
        }
        if ($this->container['shipping_solution'] === null) {
            $invalidProperties[] = "'shipping_solution' can't be null";
        }
        if ($this->container['transportation_option_id'] === null) {
            $invalidProperties[] = "'transportation_option_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets carrier
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\Carrier
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\Carrier $carrier carrier
     *
     * @return $this
     */
    public function setCarrier($carrier)
    {
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets carrier_appointment
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CarrierAppointment
     */
    public function getCarrierAppointment()
    {
        return $this->container['carrier_appointment'];
    }

    /**
     * Sets carrier_appointment
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CarrierAppointment $carrier_appointment carrier_appointment
     *
     * @return $this
     */
    public function setCarrierAppointment($carrier_appointment)
    {
        $this->container['carrier_appointment'] = $carrier_appointment;

        return $this;
    }

    /**
     * Gets preconditions
     *
     * @return string[]
     */
    public function getPreconditions()
    {
        return $this->container['preconditions'];
    }

    /**
     * Sets preconditions
     *
     * @param string[] $preconditions Identifies a list of preconditions for confirming the transportation option.
     *
     * @return $this
     */
    public function setPreconditions($preconditions)
    {
        $this->container['preconditions'] = $preconditions;

        return $this;
    }

    /**
     * Gets quote
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\Quote
     */
    public function getQuote()
    {
        return $this->container['quote'];
    }

    /**
     * Sets quote
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\Quote $quote quote
     *
     * @return $this
     */
    public function setQuote($quote)
    {
        $this->container['quote'] = $quote;

        return $this;
    }

    /**
     * Gets shipment_id
     *
     * @return string
     */
    public function getShipmentId()
    {
        return $this->container['shipment_id'];
    }

    /**
     * Sets shipment_id
     *
     * @param string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded.
     *
     * @return $this
     */
    public function setShipmentId($shipment_id)
    {
        $this->container['shipment_id'] = $shipment_id;

        return $this;
    }

    /**
     * Gets shipping_mode
     *
     * @return string
     */
    public function getShippingMode()
    {
        return $this->container['shipping_mode'];
    }

    /**
     * Sets shipping_mode
     *
     * @param string $shipping_mode Mode of shipment transportation that this option will provide. Can be: `GROUND_SMALL_PARCEL`, `FREIGHT_LTL`, `FREIGHT_FTL_PALLET`, `FREIGHT_FTL_NONPALLET`, `OCEAN_LCL`, `OCEAN_FCL`, `AIR_SMALL_PARCEL`, `AIR_SMALL_PARCEL_EXPRESS`.
     *
     * @return $this
     */
    public function setShippingMode($shipping_mode)
    {
        $this->container['shipping_mode'] = $shipping_mode;

        return $this;
    }

    /**
     * Gets shipping_solution
     *
     * @return string
     */
    public function getShippingSolution()
    {
        return $this->container['shipping_solution'];
    }

    /**
     * Sets shipping_solution
     *
     * @param string $shipping_solution Shipping program for the option. Can be: `AMAZON_PARTNERED_CARRIER`, `USE_YOUR_OWN_CARRIER`.
     *
     * @return $this
     */
    public function setShippingSolution($shipping_solution)
    {
        $this->container['shipping_solution'] = $shipping_solution;

        return $this;
    }

    /**
     * Gets transportation_option_id
     *
     * @return string
     */
    public function getTransportationOptionId()
    {
        return $this->container['transportation_option_id'];
    }

    /**
     * Sets transportation_option_id
     *
     * @param string $transportation_option_id Identifier of a transportation option. A transportation option represent one option for how to send a shipment.
     *
     * @return $this
     */
    public function setTransportationOptionId($transportation_option_id)
    {
        $this->container['transportation_option_id'] = $transportation_option_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
