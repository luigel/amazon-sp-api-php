<?php
/**
 * CarrierAccountInput
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.61
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Luigel\AmazonSellingPartnerAPI\Models\Shipping;

use \ArrayAccess;
use Luigel\AmazonSellingPartnerAPI\ObjectSerializer;

/**
 * CarrierAccountInput Class Doc Comment
 *
 * @category Class
 * @description Info About CarrierAccountInput
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CarrierAccountInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CarrierAccountInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description_localization_key' => 'string',
        'name' => 'string',
        'group_name' => 'string',
        'input_type' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\InputType',
        'is_mandatory' => 'bool',
        'is_confidential' => 'bool',
        'is_hidden' => 'bool',
        'validation_metadata' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\ValidationMetadataList'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description_localization_key' => null,
        'name' => null,
        'group_name' => null,
        'input_type' => null,
        'is_mandatory' => null,
        'is_confidential' => null,
        'is_hidden' => null,
        'validation_metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description_localization_key' => 'descriptionLocalizationKey',
        'name' => 'name',
        'group_name' => 'groupName',
        'input_type' => 'inputType',
        'is_mandatory' => 'isMandatory',
        'is_confidential' => 'isConfidential',
        'is_hidden' => 'isHidden',
        'validation_metadata' => 'validationMetadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description_localization_key' => 'setDescriptionLocalizationKey',
        'name' => 'setName',
        'group_name' => 'setGroupName',
        'input_type' => 'setInputType',
        'is_mandatory' => 'setIsMandatory',
        'is_confidential' => 'setIsConfidential',
        'is_hidden' => 'setIsHidden',
        'validation_metadata' => 'setValidationMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description_localization_key' => 'getDescriptionLocalizationKey',
        'name' => 'getName',
        'group_name' => 'getGroupName',
        'input_type' => 'getInputType',
        'is_mandatory' => 'getIsMandatory',
        'is_confidential' => 'getIsConfidential',
        'is_hidden' => 'getIsHidden',
        'validation_metadata' => 'getValidationMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description_localization_key'] = isset($data['description_localization_key']) ? $data['description_localization_key'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['group_name'] = isset($data['group_name']) ? $data['group_name'] : null;
        $this->container['input_type'] = isset($data['input_type']) ? $data['input_type'] : null;
        $this->container['is_mandatory'] = isset($data['is_mandatory']) ? $data['is_mandatory'] : null;
        $this->container['is_confidential'] = isset($data['is_confidential']) ? $data['is_confidential'] : null;
        $this->container['is_hidden'] = isset($data['is_hidden']) ? $data['is_hidden'] : null;
        $this->container['validation_metadata'] = isset($data['validation_metadata']) ? $data['validation_metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description_localization_key
     *
     * @return string
     */
    public function getDescriptionLocalizationKey()
    {
        return $this->container['description_localization_key'];
    }

    /**
     * Sets description_localization_key
     *
     * @param string $description_localization_key descriptionLocalizationKey value .
     *
     * @return $this
     */
    public function setDescriptionLocalizationKey($description_localization_key)
    {
        $this->container['description_localization_key'] = $description_localization_key;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name value .
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets group_name
     *
     * @return string
     */
    public function getGroupName()
    {
        return $this->container['group_name'];
    }

    /**
     * Sets group_name
     *
     * @param string $group_name groupName value .
     *
     * @return $this
     */
    public function setGroupName($group_name)
    {
        $this->container['group_name'] = $group_name;

        return $this;
    }

    /**
     * Gets input_type
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\InputType
     */
    public function getInputType()
    {
        return $this->container['input_type'];
    }

    /**
     * Sets input_type
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\InputType $input_type input_type
     *
     * @return $this
     */
    public function setInputType($input_type)
    {
        $this->container['input_type'] = $input_type;

        return $this;
    }

    /**
     * Gets is_mandatory
     *
     * @return bool
     */
    public function getIsMandatory()
    {
        return $this->container['is_mandatory'];
    }

    /**
     * Sets is_mandatory
     *
     * @param bool $is_mandatory mandatory or not  value .
     *
     * @return $this
     */
    public function setIsMandatory($is_mandatory)
    {
        $this->container['is_mandatory'] = $is_mandatory;

        return $this;
    }

    /**
     * Gets is_confidential
     *
     * @return bool
     */
    public function getIsConfidential()
    {
        return $this->container['is_confidential'];
    }

    /**
     * Sets is_confidential
     *
     * @param bool $is_confidential is value is Confidential .
     *
     * @return $this
     */
    public function setIsConfidential($is_confidential)
    {
        $this->container['is_confidential'] = $is_confidential;

        return $this;
    }

    /**
     * Gets is_hidden
     *
     * @return bool
     */
    public function getIsHidden()
    {
        return $this->container['is_hidden'];
    }

    /**
     * Sets is_hidden
     *
     * @param bool $is_hidden is value is hidden .
     *
     * @return $this
     */
    public function setIsHidden($is_hidden)
    {
        $this->container['is_hidden'] = $is_hidden;

        return $this;
    }

    /**
     * Gets validation_metadata
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\ValidationMetadataList
     */
    public function getValidationMetadata()
    {
        return $this->container['validation_metadata'];
    }

    /**
     * Sets validation_metadata
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\ValidationMetadataList $validation_metadata validation_metadata
     *
     * @return $this
     */
    public function setValidationMetadata($validation_metadata)
    {
        $this->container['validation_metadata'] = $validation_metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
