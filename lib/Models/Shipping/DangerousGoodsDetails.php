<?php
/**
 * DangerousGoodsDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.61
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Luigel\AmazonSellingPartnerAPI\Models\Shipping;

use \ArrayAccess;
use Luigel\AmazonSellingPartnerAPI\ObjectSerializer;

/**
 * DangerousGoodsDetails Class Doc Comment
 *
 * @category Class
 * @description Details related to any dangerous goods/items that are being shipped.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DangerousGoodsDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DangerousGoodsDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'united_nations_regulatory_id' => 'string',
        'transportation_regulatory_class' => 'string',
        'packing_group' => 'string',
        'packing_instruction' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'united_nations_regulatory_id' => null,
        'transportation_regulatory_class' => null,
        'packing_group' => null,
        'packing_instruction' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'united_nations_regulatory_id' => 'unitedNationsRegulatoryId',
        'transportation_regulatory_class' => 'transportationRegulatoryClass',
        'packing_group' => 'packingGroup',
        'packing_instruction' => 'packingInstruction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'united_nations_regulatory_id' => 'setUnitedNationsRegulatoryId',
        'transportation_regulatory_class' => 'setTransportationRegulatoryClass',
        'packing_group' => 'setPackingGroup',
        'packing_instruction' => 'setPackingInstruction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'united_nations_regulatory_id' => 'getUnitedNationsRegulatoryId',
        'transportation_regulatory_class' => 'getTransportationRegulatoryClass',
        'packing_group' => 'getPackingGroup',
        'packing_instruction' => 'getPackingInstruction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PACKING_GROUP_I = 'I';
    const PACKING_GROUP_II = 'II';
    const PACKING_GROUP_III = 'III';
    const PACKING_INSTRUCTION_PI965_SECTION_IA = 'PI965_SECTION_IA';
    const PACKING_INSTRUCTION_PI965_SECTION_IB = 'PI965_SECTION_IB';
    const PACKING_INSTRUCTION_PI965_SECTION_II = 'PI965_SECTION_II';
    const PACKING_INSTRUCTION_PI966_SECTION_I = 'PI966_SECTION_I';
    const PACKING_INSTRUCTION_PI966_SECTION_II = 'PI966_SECTION_II';
    const PACKING_INSTRUCTION_PI967_SECTION_I = 'PI967_SECTION_I';
    const PACKING_INSTRUCTION_PI967_SECTION_II = 'PI967_SECTION_II';
    const PACKING_INSTRUCTION_PI968_SECTION_IA = 'PI968_SECTION_IA';
    const PACKING_INSTRUCTION_PI968_SECTION_IB = 'PI968_SECTION_IB';
    const PACKING_INSTRUCTION_PI969_SECTION_I = 'PI969_SECTION_I';
    const PACKING_INSTRUCTION_PI969_SECTION_II = 'PI969_SECTION_II';
    const PACKING_INSTRUCTION_PI970_SECTION_I = 'PI970_SECTION_I';
    const PACKING_INSTRUCTION_PI970_SECTION_II = 'PI970_SECTION_II';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackingGroupAllowableValues()
    {
        return [
            self::PACKING_GROUP_I,
            self::PACKING_GROUP_II,
            self::PACKING_GROUP_III,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackingInstructionAllowableValues()
    {
        return [
            self::PACKING_INSTRUCTION_PI965_SECTION_IA
            self::PACKING_INSTRUCTION_PI965_SECTION_IB
            self::PACKING_INSTRUCTION_PI965_SECTION_II
            self::PACKING_INSTRUCTION_PI966_SECTION_I
            self::PACKING_INSTRUCTION_PI966_SECTION_II
            self::PACKING_INSTRUCTION_PI967_SECTION_I
            self::PACKING_INSTRUCTION_PI967_SECTION_II
            self::PACKING_INSTRUCTION_PI968_SECTION_IA
            self::PACKING_INSTRUCTION_PI968_SECTION_IB
            self::PACKING_INSTRUCTION_PI969_SECTION_I
            self::PACKING_INSTRUCTION_PI969_SECTION_II
            self::PACKING_INSTRUCTION_PI970_SECTION_I
            self::PACKING_INSTRUCTION_PI970_SECTION_II
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['united_nations_regulatory_id'] = isset($data['united_nations_regulatory_id']) ? $data['united_nations_regulatory_id'] : null;
        $this->container['transportation_regulatory_class'] = isset($data['transportation_regulatory_class']) ? $data['transportation_regulatory_class'] : null;
        $this->container['packing_group'] = isset($data['packing_group']) ? $data['packing_group'] : null;
        $this->container['packing_instruction'] = isset($data['packing_instruction']) ? $data['packing_instruction'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPackingGroupAllowableValues();
        if (!is_null($this->container['packing_group']) && !in_array($this->container['packing_group'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'packing_group', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPackingInstructionAllowableValues();
        if (!is_null($this->container['packing_instruction']) && !in_array($this->container['packing_instruction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'packing_instruction', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets united_nations_regulatory_id
     *
     * @return string
     */
    public function getUnitedNationsRegulatoryId()
    {
        return $this->container['united_nations_regulatory_id'];
    }

    /**
     * Sets united_nations_regulatory_id
     *
     * @param string $united_nations_regulatory_id The specific UNID of the item being shipped.
     *
     * @return $this
     */
    public function setUnitedNationsRegulatoryId($united_nations_regulatory_id)
    {
        $this->container['united_nations_regulatory_id'] = $united_nations_regulatory_id;

        return $this;
    }

    /**
     * Gets transportation_regulatory_class
     *
     * @return string
     */
    public function getTransportationRegulatoryClass()
    {
        return $this->container['transportation_regulatory_class'];
    }

    /**
     * Sets transportation_regulatory_class
     *
     * @param string $transportation_regulatory_class The specific regulatory class  of the item being shipped.
     *
     * @return $this
     */
    public function setTransportationRegulatoryClass($transportation_regulatory_class)
    {
        $this->container['transportation_regulatory_class'] = $transportation_regulatory_class;

        return $this;
    }

    /**
     * Gets packing_group
     *
     * @return string
     */
    public function getPackingGroup()
    {
        return $this->container['packing_group'];
    }

    /**
     * Sets packing_group
     *
     * @param string $packing_group The specific packaging group of the item being shipped.
     *
     * @return $this
     */
    public function setPackingGroup($packing_group)
    {
        $allowedValues = $this->getPackingGroupAllowableValues();
        if (!is_null($packing_group) && !in_array($packing_group, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'packing_group', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['packing_group'] = $packing_group;

        return $this;
    }

    /**
     * Gets packing_instruction
     *
     * @return string
     */
    public function getPackingInstruction()
    {
        return $this->container['packing_instruction'];
    }

    /**
     * Sets packing_instruction
     *
     * @param string $packing_instruction The specific packing instruction of the item being shipped.
     *
     * @return $this
     */
    public function setPackingInstruction($packing_instruction)
    {
        $allowedValues = $this->getPackingInstructionAllowableValues();
        if (!is_null($packing_instruction) && !in_array($packing_instruction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'packing_instruction', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['packing_instruction'] = $packing_instruction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
