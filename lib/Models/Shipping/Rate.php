<?php
/**
 * Rate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.61
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Luigel\AmazonSellingPartnerAPI\Models\Shipping;

use \ArrayAccess;
use Luigel\AmazonSellingPartnerAPI\ObjectSerializer;

/**
 * Rate Class Doc Comment
 *
 * @category Class
 * @description The details of a shipping service offering.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Rate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Rate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rate_id' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\RateId',
        'carrier_id' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\CarrierId',
        'carrier_name' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\CarrierName',
        'service_id' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\ServiceId',
        'service_name' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\ServiceName',
        'billed_weight' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\Weight',
        'total_charge' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\Currency',
        'promise' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\Promise',
        'supported_document_specifications' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\SupportedDocumentSpecificationList',
        'available_value_added_service_groups' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\AvailableValueAddedServiceGroupList',
        'requires_additional_inputs' => 'bool',
        'rate_item_list' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\RateItemList',
        'payment_type' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\PaymentType',
        'benefits' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\Benefits'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rate_id' => null,
        'carrier_id' => null,
        'carrier_name' => null,
        'service_id' => null,
        'service_name' => null,
        'billed_weight' => null,
        'total_charge' => null,
        'promise' => null,
        'supported_document_specifications' => null,
        'available_value_added_service_groups' => null,
        'requires_additional_inputs' => null,
        'rate_item_list' => null,
        'payment_type' => null,
        'benefits' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rate_id' => 'rateId',
        'carrier_id' => 'carrierId',
        'carrier_name' => 'carrierName',
        'service_id' => 'serviceId',
        'service_name' => 'serviceName',
        'billed_weight' => 'billedWeight',
        'total_charge' => 'totalCharge',
        'promise' => 'promise',
        'supported_document_specifications' => 'supportedDocumentSpecifications',
        'available_value_added_service_groups' => 'availableValueAddedServiceGroups',
        'requires_additional_inputs' => 'requiresAdditionalInputs',
        'rate_item_list' => 'rateItemList',
        'payment_type' => 'paymentType',
        'benefits' => 'benefits'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rate_id' => 'setRateId',
        'carrier_id' => 'setCarrierId',
        'carrier_name' => 'setCarrierName',
        'service_id' => 'setServiceId',
        'service_name' => 'setServiceName',
        'billed_weight' => 'setBilledWeight',
        'total_charge' => 'setTotalCharge',
        'promise' => 'setPromise',
        'supported_document_specifications' => 'setSupportedDocumentSpecifications',
        'available_value_added_service_groups' => 'setAvailableValueAddedServiceGroups',
        'requires_additional_inputs' => 'setRequiresAdditionalInputs',
        'rate_item_list' => 'setRateItemList',
        'payment_type' => 'setPaymentType',
        'benefits' => 'setBenefits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rate_id' => 'getRateId',
        'carrier_id' => 'getCarrierId',
        'carrier_name' => 'getCarrierName',
        'service_id' => 'getServiceId',
        'service_name' => 'getServiceName',
        'billed_weight' => 'getBilledWeight',
        'total_charge' => 'getTotalCharge',
        'promise' => 'getPromise',
        'supported_document_specifications' => 'getSupportedDocumentSpecifications',
        'available_value_added_service_groups' => 'getAvailableValueAddedServiceGroups',
        'requires_additional_inputs' => 'getRequiresAdditionalInputs',
        'rate_item_list' => 'getRateItemList',
        'payment_type' => 'getPaymentType',
        'benefits' => 'getBenefits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rate_id'] = isset($data['rate_id']) ? $data['rate_id'] : null;
        $this->container['carrier_id'] = isset($data['carrier_id']) ? $data['carrier_id'] : null;
        $this->container['carrier_name'] = isset($data['carrier_name']) ? $data['carrier_name'] : null;
        $this->container['service_id'] = isset($data['service_id']) ? $data['service_id'] : null;
        $this->container['service_name'] = isset($data['service_name']) ? $data['service_name'] : null;
        $this->container['billed_weight'] = isset($data['billed_weight']) ? $data['billed_weight'] : null;
        $this->container['total_charge'] = isset($data['total_charge']) ? $data['total_charge'] : null;
        $this->container['promise'] = isset($data['promise']) ? $data['promise'] : null;
        $this->container['supported_document_specifications'] = isset($data['supported_document_specifications']) ? $data['supported_document_specifications'] : null;
        $this->container['available_value_added_service_groups'] = isset($data['available_value_added_service_groups']) ? $data['available_value_added_service_groups'] : null;
        $this->container['requires_additional_inputs'] = isset($data['requires_additional_inputs']) ? $data['requires_additional_inputs'] : null;
        $this->container['rate_item_list'] = isset($data['rate_item_list']) ? $data['rate_item_list'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['benefits'] = isset($data['benefits']) ? $data['benefits'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['rate_id'] === null) {
            $invalidProperties[] = "'rate_id' can't be null";
        }
        if ($this->container['carrier_id'] === null) {
            $invalidProperties[] = "'carrier_id' can't be null";
        }
        if ($this->container['carrier_name'] === null) {
            $invalidProperties[] = "'carrier_name' can't be null";
        }
        if ($this->container['service_id'] === null) {
            $invalidProperties[] = "'service_id' can't be null";
        }
        if ($this->container['service_name'] === null) {
            $invalidProperties[] = "'service_name' can't be null";
        }
        if ($this->container['total_charge'] === null) {
            $invalidProperties[] = "'total_charge' can't be null";
        }
        if ($this->container['promise'] === null) {
            $invalidProperties[] = "'promise' can't be null";
        }
        if ($this->container['supported_document_specifications'] === null) {
            $invalidProperties[] = "'supported_document_specifications' can't be null";
        }
        if ($this->container['requires_additional_inputs'] === null) {
            $invalidProperties[] = "'requires_additional_inputs' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rate_id
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\RateId
     */
    public function getRateId()
    {
        return $this->container['rate_id'];
    }

    /**
     * Sets rate_id
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\RateId $rate_id rate_id
     *
     * @return $this
     */
    public function setRateId($rate_id)
    {
        $this->container['rate_id'] = $rate_id;

        return $this;
    }

    /**
     * Gets carrier_id
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\CarrierId
     */
    public function getCarrierId()
    {
        return $this->container['carrier_id'];
    }

    /**
     * Sets carrier_id
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\CarrierId $carrier_id carrier_id
     *
     * @return $this
     */
    public function setCarrierId($carrier_id)
    {
        $this->container['carrier_id'] = $carrier_id;

        return $this;
    }

    /**
     * Gets carrier_name
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\CarrierName
     */
    public function getCarrierName()
    {
        return $this->container['carrier_name'];
    }

    /**
     * Sets carrier_name
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\CarrierName $carrier_name carrier_name
     *
     * @return $this
     */
    public function setCarrierName($carrier_name)
    {
        $this->container['carrier_name'] = $carrier_name;

        return $this;
    }

    /**
     * Gets service_id
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\ServiceId
     */
    public function getServiceId()
    {
        return $this->container['service_id'];
    }

    /**
     * Sets service_id
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\ServiceId $service_id service_id
     *
     * @return $this
     */
    public function setServiceId($service_id)
    {
        $this->container['service_id'] = $service_id;

        return $this;
    }

    /**
     * Gets service_name
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\ServiceName
     */
    public function getServiceName()
    {
        return $this->container['service_name'];
    }

    /**
     * Sets service_name
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\ServiceName $service_name service_name
     *
     * @return $this
     */
    public function setServiceName($service_name)
    {
        $this->container['service_name'] = $service_name;

        return $this;
    }

    /**
     * Gets billed_weight
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\Weight
     */
    public function getBilledWeight()
    {
        return $this->container['billed_weight'];
    }

    /**
     * Sets billed_weight
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\Weight $billed_weight billed_weight
     *
     * @return $this
     */
    public function setBilledWeight($billed_weight)
    {
        $this->container['billed_weight'] = $billed_weight;

        return $this;
    }

    /**
     * Gets total_charge
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\Currency
     */
    public function getTotalCharge()
    {
        return $this->container['total_charge'];
    }

    /**
     * Sets total_charge
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\Currency $total_charge total_charge
     *
     * @return $this
     */
    public function setTotalCharge($total_charge)
    {
        $this->container['total_charge'] = $total_charge;

        return $this;
    }

    /**
     * Gets promise
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\Promise
     */
    public function getPromise()
    {
        return $this->container['promise'];
    }

    /**
     * Sets promise
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\Promise $promise promise
     *
     * @return $this
     */
    public function setPromise($promise)
    {
        $this->container['promise'] = $promise;

        return $this;
    }

    /**
     * Gets supported_document_specifications
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\SupportedDocumentSpecificationList
     */
    public function getSupportedDocumentSpecifications()
    {
        return $this->container['supported_document_specifications'];
    }

    /**
     * Sets supported_document_specifications
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\SupportedDocumentSpecificationList $supported_document_specifications supported_document_specifications
     *
     * @return $this
     */
    public function setSupportedDocumentSpecifications($supported_document_specifications)
    {
        $this->container['supported_document_specifications'] = $supported_document_specifications;

        return $this;
    }

    /**
     * Gets available_value_added_service_groups
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\AvailableValueAddedServiceGroupList
     */
    public function getAvailableValueAddedServiceGroups()
    {
        return $this->container['available_value_added_service_groups'];
    }

    /**
     * Sets available_value_added_service_groups
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\AvailableValueAddedServiceGroupList $available_value_added_service_groups available_value_added_service_groups
     *
     * @return $this
     */
    public function setAvailableValueAddedServiceGroups($available_value_added_service_groups)
    {
        $this->container['available_value_added_service_groups'] = $available_value_added_service_groups;

        return $this;
    }

    /**
     * Gets requires_additional_inputs
     *
     * @return bool
     */
    public function getRequiresAdditionalInputs()
    {
        return $this->container['requires_additional_inputs'];
    }

    /**
     * Sets requires_additional_inputs
     *
     * @param bool $requires_additional_inputs When true, indicates that additional inputs are required to purchase this shipment service. You must then call the getAdditionalInputs operation to return the JSON schema to use when providing the additional inputs to the purchaseShipment operation.
     *
     * @return $this
     */
    public function setRequiresAdditionalInputs($requires_additional_inputs)
    {
        $this->container['requires_additional_inputs'] = $requires_additional_inputs;

        return $this;
    }

    /**
     * Gets rate_item_list
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\RateItemList
     */
    public function getRateItemList()
    {
        return $this->container['rate_item_list'];
    }

    /**
     * Sets rate_item_list
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\RateItemList $rate_item_list rate_item_list
     *
     * @return $this
     */
    public function setRateItemList($rate_item_list)
    {
        $this->container['rate_item_list'] = $rate_item_list;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\PaymentType
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\PaymentType $payment_type payment_type
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets benefits
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\Benefits
     */
    public function getBenefits()
    {
        return $this->container['benefits'];
    }

    /**
     * Sets benefits
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\Benefits $benefits benefits
     *
     * @return $this
     */
    public function setBenefits($benefits)
    {
        $this->container['benefits'] = $benefits;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
