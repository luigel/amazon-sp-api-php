<?php
/**
 * OperatingHours
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.61
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Luigel\AmazonSellingPartnerAPI\Models\Shipping;

use \ArrayAccess;
use Luigel\AmazonSellingPartnerAPI\ObjectSerializer;

/**
 * OperatingHours Class Doc Comment
 *
 * @category Class
 * @description The hours in which the access point shall remain operational
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OperatingHours implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OperatingHours';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'closing_time' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\TimeOfDay',
        'opening_time' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\TimeOfDay',
        'mid_day_closures' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\TimeOfDay[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'closing_time' => null,
        'opening_time' => null,
        'mid_day_closures' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'closing_time' => 'closingTime',
        'opening_time' => 'openingTime',
        'mid_day_closures' => 'midDayClosures'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'closing_time' => 'setClosingTime',
        'opening_time' => 'setOpeningTime',
        'mid_day_closures' => 'setMidDayClosures'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'closing_time' => 'getClosingTime',
        'opening_time' => 'getOpeningTime',
        'mid_day_closures' => 'getMidDayClosures'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['closing_time'] = isset($data['closing_time']) ? $data['closing_time'] : null;
        $this->container['opening_time'] = isset($data['opening_time']) ? $data['opening_time'] : null;
        $this->container['mid_day_closures'] = isset($data['mid_day_closures']) ? $data['mid_day_closures'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets closing_time
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\TimeOfDay
     */
    public function getClosingTime()
    {
        return $this->container['closing_time'];
    }

    /**
     * Sets closing_time
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\TimeOfDay $closing_time closing_time
     *
     * @return $this
     */
    public function setClosingTime($closing_time)
    {
        $this->container['closing_time'] = $closing_time;

        return $this;
    }

    /**
     * Gets opening_time
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\TimeOfDay
     */
    public function getOpeningTime()
    {
        return $this->container['opening_time'];
    }

    /**
     * Sets opening_time
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\TimeOfDay $opening_time opening_time
     *
     * @return $this
     */
    public function setOpeningTime($opening_time)
    {
        $this->container['opening_time'] = $opening_time;

        return $this;
    }

    /**
     * Gets mid_day_closures
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\TimeOfDay[]
     */
    public function getMidDayClosures()
    {
        return $this->container['mid_day_closures'];
    }

    /**
     * Sets mid_day_closures
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\TimeOfDay[] $mid_day_closures mid_day_closures
     *
     * @return $this
     */
    public function setMidDayClosures($mid_day_closures)
    {
        $this->container['mid_day_closures'] = $mid_day_closures;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
