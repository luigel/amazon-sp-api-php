<?php
/**
 * AccessPoint
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.61
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Luigel\AmazonSellingPartnerAPI\Models\Shipping;

use \ArrayAccess;
use Luigel\AmazonSellingPartnerAPI\ObjectSerializer;

/**
 * AccessPoint Class Doc Comment
 *
 * @category Class
 * @description Access point details
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccessPoint implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccessPoint';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'access_point_id' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\AccessPointId',
        'name' => 'string',
        'timezone' => 'string',
        'type' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\AccessPointType',
        'accessibility_attributes' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\AccessibilityAttributes',
        'address' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\Address',
        'exception_operating_hours' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\ExceptionOperatingHours[]',
        'assistance_type' => 'string',
        'score' => 'string',
        'standard_operating_hours' => '\Luigel\AmazonSellingPartnerAPI\Models\Shipping\DayOfWeekTimeMap'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'access_point_id' => null,
        'name' => null,
        'timezone' => null,
        'type' => null,
        'accessibility_attributes' => null,
        'address' => null,
        'exception_operating_hours' => null,
        'assistance_type' => null,
        'score' => null,
        'standard_operating_hours' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_point_id' => 'accessPointId',
        'name' => 'name',
        'timezone' => 'timezone',
        'type' => 'type',
        'accessibility_attributes' => 'accessibilityAttributes',
        'address' => 'address',
        'exception_operating_hours' => 'exceptionOperatingHours',
        'assistance_type' => 'assistanceType',
        'score' => 'score',
        'standard_operating_hours' => 'standardOperatingHours'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_point_id' => 'setAccessPointId',
        'name' => 'setName',
        'timezone' => 'setTimezone',
        'type' => 'setType',
        'accessibility_attributes' => 'setAccessibilityAttributes',
        'address' => 'setAddress',
        'exception_operating_hours' => 'setExceptionOperatingHours',
        'assistance_type' => 'setAssistanceType',
        'score' => 'setScore',
        'standard_operating_hours' => 'setStandardOperatingHours'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_point_id' => 'getAccessPointId',
        'name' => 'getName',
        'timezone' => 'getTimezone',
        'type' => 'getType',
        'accessibility_attributes' => 'getAccessibilityAttributes',
        'address' => 'getAddress',
        'exception_operating_hours' => 'getExceptionOperatingHours',
        'assistance_type' => 'getAssistanceType',
        'score' => 'getScore',
        'standard_operating_hours' => 'getStandardOperatingHours'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ASSISTANCE_TYPE_STAFF_ASSISTED = 'STAFF_ASSISTED';
    const ASSISTANCE_TYPE_SELF_ASSISTED = 'SELF_ASSISTED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAssistanceTypeAllowableValues()
    {
        return [
            self::ASSISTANCE_TYPE_STAFF_ASSISTED,
            self::ASSISTANCE_TYPE_SELF_ASSISTED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_point_id'] = isset($data['access_point_id']) ? $data['access_point_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['accessibility_attributes'] = isset($data['accessibility_attributes']) ? $data['accessibility_attributes'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['exception_operating_hours'] = isset($data['exception_operating_hours']) ? $data['exception_operating_hours'] : null;
        $this->container['assistance_type'] = isset($data['assistance_type']) ? $data['assistance_type'] : null;
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['standard_operating_hours'] = isset($data['standard_operating_hours']) ? $data['standard_operating_hours'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAssistanceTypeAllowableValues();
        if (!is_null($this->container['assistance_type']) && !in_array($this->container['assistance_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'assistance_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_point_id
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\AccessPointId
     */
    public function getAccessPointId()
    {
        return $this->container['access_point_id'];
    }

    /**
     * Sets access_point_id
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\AccessPointId $access_point_id access_point_id
     *
     * @return $this
     */
    public function setAccessPointId($access_point_id)
    {
        $this->container['access_point_id'] = $access_point_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of entity (store/hub etc) where this access point is located
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone Timezone of access point
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\AccessPointType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\AccessPointType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets accessibility_attributes
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\AccessibilityAttributes
     */
    public function getAccessibilityAttributes()
    {
        return $this->container['accessibility_attributes'];
    }

    /**
     * Sets accessibility_attributes
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\AccessibilityAttributes $accessibility_attributes accessibility_attributes
     *
     * @return $this
     */
    public function setAccessibilityAttributes($accessibility_attributes)
    {
        $this->container['accessibility_attributes'] = $accessibility_attributes;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\Address $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets exception_operating_hours
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\ExceptionOperatingHours[]
     */
    public function getExceptionOperatingHours()
    {
        return $this->container['exception_operating_hours'];
    }

    /**
     * Sets exception_operating_hours
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\ExceptionOperatingHours[] $exception_operating_hours exception_operating_hours
     *
     * @return $this
     */
    public function setExceptionOperatingHours($exception_operating_hours)
    {
        $this->container['exception_operating_hours'] = $exception_operating_hours;

        return $this;
    }

    /**
     * Gets assistance_type
     *
     * @return string
     */
    public function getAssistanceType()
    {
        return $this->container['assistance_type'];
    }

    /**
     * Sets assistance_type
     *
     * @param string $assistance_type assistance_type
     *
     * @return $this
     */
    public function setAssistanceType($assistance_type)
    {
        $allowedValues = $this->getAssistanceTypeAllowableValues();
        if (!is_null($assistance_type) && !in_array($assistance_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'assistance_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['assistance_type'] = $assistance_type;

        return $this;
    }

    /**
     * Gets score
     *
     * @return string
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param string $score The score of access point, based on proximity to postal code and sorting preference. This can be used to sort access point results on shipper's end.
     *
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets standard_operating_hours
     *
     * @return \Luigel\AmazonSellingPartnerAPI\Models\Shipping\DayOfWeekTimeMap
     */
    public function getStandardOperatingHours()
    {
        return $this->container['standard_operating_hours'];
    }

    /**
     * Sets standard_operating_hours
     *
     * @param \Luigel\AmazonSellingPartnerAPI\Models\Shipping\DayOfWeekTimeMap $standard_operating_hours standard_operating_hours
     *
     * @return $this
     */
    public function setStandardOperatingHours($standard_operating_hours)
    {
        $this->container['standard_operating_hours'] = $standard_operating_hours;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
