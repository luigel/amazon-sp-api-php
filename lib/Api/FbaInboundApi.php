<?php
/**
 * FbaInboundApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * The Selling Partner API for FBA inbound operations.
 *
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * OpenAPI spec version: 2024-03-20
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.61
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Luigel\AmazonSellingPartnerAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use Luigel\AmazonSellingPartnerAPI\Configuration;
use Luigel\AmazonSellingPartnerAPI\HeaderSelector;
use Luigel\AmazonSellingPartnerAPI\Helpers\SellingPartnerApiRequest;
use Luigel\AmazonSellingPartnerAPI\ObjectSerializer;

class FbaInboundApi
{
    use SellingPartnerApiRequest;

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param Configuration   $config
     */
    public function __construct(
        Configuration $config
    ) {
        $this->client = new Client();
        $this->config = $config;
        $this->headerSelector = new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelInboundPlan
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CancelInboundPlanResponse
     */
    public function cancelInboundPlan($inbound_plan_id)
    {
        list($response) = $this->cancelInboundPlanWithHttpInfo($inbound_plan_id);
        return $response;
    }

    /**
     * Operation cancelInboundPlanWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CancelInboundPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelInboundPlanWithHttpInfo($inbound_plan_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CancelInboundPlanResponse';
        $request = $this->cancelInboundPlanRequest($inbound_plan_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation cancelInboundPlanAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelInboundPlanAsync($inbound_plan_id)
    {
        return $this->cancelInboundPlanAsyncWithHttpInfo($inbound_plan_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelInboundPlanAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelInboundPlanAsyncWithHttpInfo($inbound_plan_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CancelInboundPlanResponse';
        $request = $this->cancelInboundPlanRequest($inbound_plan_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'cancelInboundPlan'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelInboundPlanRequest($inbound_plan_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling cancelInboundPlan'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/cancellation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'PUT', $httpBody);
    }

    /**
     * Operation cancelSelfShipAppointment
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CancelSelfShipAppointmentRequest $body The body of the request to &#x60;cancelSelfShipAppointment&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CancelSelfShipAppointmentResponse
     */
    public function cancelSelfShipAppointment($body, $inbound_plan_id, $shipment_id)
    {
        list($response) = $this->cancelSelfShipAppointmentWithHttpInfo($body, $inbound_plan_id, $shipment_id);
        return $response;
    }

    /**
     * Operation cancelSelfShipAppointmentWithHttpInfo
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CancelSelfShipAppointmentRequest $body The body of the request to &#x60;cancelSelfShipAppointment&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CancelSelfShipAppointmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelSelfShipAppointmentWithHttpInfo($body, $inbound_plan_id, $shipment_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CancelSelfShipAppointmentResponse';
        $request = $this->cancelSelfShipAppointmentRequest($body, $inbound_plan_id, $shipment_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation cancelSelfShipAppointmentAsync
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CancelSelfShipAppointmentRequest $body The body of the request to &#x60;cancelSelfShipAppointment&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelSelfShipAppointmentAsync($body, $inbound_plan_id, $shipment_id)
    {
        return $this->cancelSelfShipAppointmentAsyncWithHttpInfo($body, $inbound_plan_id, $shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelSelfShipAppointmentAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CancelSelfShipAppointmentRequest $body The body of the request to &#x60;cancelSelfShipAppointment&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelSelfShipAppointmentAsyncWithHttpInfo($body, $inbound_plan_id, $shipment_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CancelSelfShipAppointmentResponse';
        $request = $this->cancelSelfShipAppointmentRequest($body, $inbound_plan_id, $shipment_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'cancelSelfShipAppointment'
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CancelSelfShipAppointmentRequest $body The body of the request to &#x60;cancelSelfShipAppointment&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelSelfShipAppointmentRequest($body, $inbound_plan_id, $shipment_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling cancelSelfShipAppointment'
            );
        }
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling cancelSelfShipAppointment'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling cancelSelfShipAppointment'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentCancellation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'PUT', $httpBody);
    }

    /**
     * Operation confirmDeliveryWindowOptions
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id The shipment to confirm the delivery window option for. (required)
     * @param  string $delivery_window_option_id The id of the delivery window option to be confirmed. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmDeliveryWindowOptionsResponse
     */
    public function confirmDeliveryWindowOptions($inbound_plan_id, $shipment_id, $delivery_window_option_id)
    {
        list($response) = $this->confirmDeliveryWindowOptionsWithHttpInfo($inbound_plan_id, $shipment_id, $delivery_window_option_id);
        return $response;
    }

    /**
     * Operation confirmDeliveryWindowOptionsWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id The shipment to confirm the delivery window option for. (required)
     * @param  string $delivery_window_option_id The id of the delivery window option to be confirmed. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmDeliveryWindowOptionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function confirmDeliveryWindowOptionsWithHttpInfo($inbound_plan_id, $shipment_id, $delivery_window_option_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmDeliveryWindowOptionsResponse';
        $request = $this->confirmDeliveryWindowOptionsRequest($inbound_plan_id, $shipment_id, $delivery_window_option_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation confirmDeliveryWindowOptionsAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id The shipment to confirm the delivery window option for. (required)
     * @param  string $delivery_window_option_id The id of the delivery window option to be confirmed. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmDeliveryWindowOptionsAsync($inbound_plan_id, $shipment_id, $delivery_window_option_id)
    {
        return $this->confirmDeliveryWindowOptionsAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $delivery_window_option_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmDeliveryWindowOptionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id The shipment to confirm the delivery window option for. (required)
     * @param  string $delivery_window_option_id The id of the delivery window option to be confirmed. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmDeliveryWindowOptionsAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $delivery_window_option_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmDeliveryWindowOptionsResponse';
        $request = $this->confirmDeliveryWindowOptionsRequest($inbound_plan_id, $shipment_id, $delivery_window_option_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'confirmDeliveryWindowOptions'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id The shipment to confirm the delivery window option for. (required)
     * @param  string $delivery_window_option_id The id of the delivery window option to be confirmed. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function confirmDeliveryWindowOptionsRequest($inbound_plan_id, $shipment_id, $delivery_window_option_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling confirmDeliveryWindowOptions'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling confirmDeliveryWindowOptions'
            );
        }
        // verify the required parameter 'delivery_window_option_id' is set
        if ($delivery_window_option_id === null || (is_array($delivery_window_option_id) && count($delivery_window_option_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_window_option_id when calling confirmDeliveryWindowOptions'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }
        // path params
        if ($delivery_window_option_id !== null) {
            $resourcePath = str_replace(
                '{' . 'deliveryWindowOptionId' . '}',
                ObjectSerializer::toPathValue($delivery_window_option_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'POST', $httpBody);
    }

    /**
     * Operation confirmPackingOption
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $packing_option_id Identifier of a packing option. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmPackingOptionResponse
     */
    public function confirmPackingOption($inbound_plan_id, $packing_option_id)
    {
        list($response) = $this->confirmPackingOptionWithHttpInfo($inbound_plan_id, $packing_option_id);
        return $response;
    }

    /**
     * Operation confirmPackingOptionWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $packing_option_id Identifier of a packing option. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmPackingOptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function confirmPackingOptionWithHttpInfo($inbound_plan_id, $packing_option_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmPackingOptionResponse';
        $request = $this->confirmPackingOptionRequest($inbound_plan_id, $packing_option_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation confirmPackingOptionAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $packing_option_id Identifier of a packing option. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmPackingOptionAsync($inbound_plan_id, $packing_option_id)
    {
        return $this->confirmPackingOptionAsyncWithHttpInfo($inbound_plan_id, $packing_option_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmPackingOptionAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $packing_option_id Identifier of a packing option. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmPackingOptionAsyncWithHttpInfo($inbound_plan_id, $packing_option_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmPackingOptionResponse';
        $request = $this->confirmPackingOptionRequest($inbound_plan_id, $packing_option_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'confirmPackingOption'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $packing_option_id Identifier of a packing option. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function confirmPackingOptionRequest($inbound_plan_id, $packing_option_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling confirmPackingOption'
            );
        }
        // verify the required parameter 'packing_option_id' is set
        if ($packing_option_id === null || (is_array($packing_option_id) && count($packing_option_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packing_option_id when calling confirmPackingOption'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($packing_option_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packingOptionId' . '}',
                ObjectSerializer::toPathValue($packing_option_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'POST', $httpBody);
    }

    /**
     * Operation confirmPlacementOption
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $placement_option_id The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmPlacementOptionResponse
     */
    public function confirmPlacementOption($inbound_plan_id, $placement_option_id)
    {
        list($response) = $this->confirmPlacementOptionWithHttpInfo($inbound_plan_id, $placement_option_id);
        return $response;
    }

    /**
     * Operation confirmPlacementOptionWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $placement_option_id The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmPlacementOptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function confirmPlacementOptionWithHttpInfo($inbound_plan_id, $placement_option_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmPlacementOptionResponse';
        $request = $this->confirmPlacementOptionRequest($inbound_plan_id, $placement_option_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation confirmPlacementOptionAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $placement_option_id The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmPlacementOptionAsync($inbound_plan_id, $placement_option_id)
    {
        return $this->confirmPlacementOptionAsyncWithHttpInfo($inbound_plan_id, $placement_option_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmPlacementOptionAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $placement_option_id The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmPlacementOptionAsyncWithHttpInfo($inbound_plan_id, $placement_option_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmPlacementOptionResponse';
        $request = $this->confirmPlacementOptionRequest($inbound_plan_id, $placement_option_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'confirmPlacementOption'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $placement_option_id The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function confirmPlacementOptionRequest($inbound_plan_id, $placement_option_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling confirmPlacementOption'
            );
        }
        // verify the required parameter 'placement_option_id' is set
        if ($placement_option_id === null || (is_array($placement_option_id) && count($placement_option_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $placement_option_id when calling confirmPlacementOption'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($placement_option_id !== null) {
            $resourcePath = str_replace(
                '{' . 'placementOptionId' . '}',
                ObjectSerializer::toPathValue($placement_option_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'POST', $httpBody);
    }

    /**
     * Operation confirmShipmentContentUpdatePreview
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  string $content_update_preview_id Identifier of a content update preview. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmShipmentContentUpdatePreviewResponse
     */
    public function confirmShipmentContentUpdatePreview($inbound_plan_id, $shipment_id, $content_update_preview_id)
    {
        list($response) = $this->confirmShipmentContentUpdatePreviewWithHttpInfo($inbound_plan_id, $shipment_id, $content_update_preview_id);
        return $response;
    }

    /**
     * Operation confirmShipmentContentUpdatePreviewWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  string $content_update_preview_id Identifier of a content update preview. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmShipmentContentUpdatePreviewResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function confirmShipmentContentUpdatePreviewWithHttpInfo($inbound_plan_id, $shipment_id, $content_update_preview_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmShipmentContentUpdatePreviewResponse';
        $request = $this->confirmShipmentContentUpdatePreviewRequest($inbound_plan_id, $shipment_id, $content_update_preview_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation confirmShipmentContentUpdatePreviewAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  string $content_update_preview_id Identifier of a content update preview. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmShipmentContentUpdatePreviewAsync($inbound_plan_id, $shipment_id, $content_update_preview_id)
    {
        return $this->confirmShipmentContentUpdatePreviewAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $content_update_preview_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmShipmentContentUpdatePreviewAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  string $content_update_preview_id Identifier of a content update preview. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmShipmentContentUpdatePreviewAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $content_update_preview_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmShipmentContentUpdatePreviewResponse';
        $request = $this->confirmShipmentContentUpdatePreviewRequest($inbound_plan_id, $shipment_id, $content_update_preview_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'confirmShipmentContentUpdatePreview'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  string $content_update_preview_id Identifier of a content update preview. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function confirmShipmentContentUpdatePreviewRequest($inbound_plan_id, $shipment_id, $content_update_preview_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling confirmShipmentContentUpdatePreview'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling confirmShipmentContentUpdatePreview'
            );
        }
        // verify the required parameter 'content_update_preview_id' is set
        if ($content_update_preview_id === null || (is_array($content_update_preview_id) && count($content_update_preview_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_update_preview_id when calling confirmShipmentContentUpdatePreview'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }
        // path params
        if ($content_update_preview_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentUpdatePreviewId' . '}',
                ObjectSerializer::toPathValue($content_update_preview_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'POST', $httpBody);
    }

    /**
     * Operation confirmTransportationOptions
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmTransportationOptionsRequest $body The body of the request to &#x60;confirmTransportationOptions&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmTransportationOptionsResponse
     */
    public function confirmTransportationOptions($body, $inbound_plan_id)
    {
        list($response) = $this->confirmTransportationOptionsWithHttpInfo($body, $inbound_plan_id);
        return $response;
    }

    /**
     * Operation confirmTransportationOptionsWithHttpInfo
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmTransportationOptionsRequest $body The body of the request to &#x60;confirmTransportationOptions&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmTransportationOptionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function confirmTransportationOptionsWithHttpInfo($body, $inbound_plan_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmTransportationOptionsResponse';
        $request = $this->confirmTransportationOptionsRequest($body, $inbound_plan_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation confirmTransportationOptionsAsync
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmTransportationOptionsRequest $body The body of the request to &#x60;confirmTransportationOptions&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmTransportationOptionsAsync($body, $inbound_plan_id)
    {
        return $this->confirmTransportationOptionsAsyncWithHttpInfo($body, $inbound_plan_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation confirmTransportationOptionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmTransportationOptionsRequest $body The body of the request to &#x60;confirmTransportationOptions&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function confirmTransportationOptionsAsyncWithHttpInfo($body, $inbound_plan_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmTransportationOptionsResponse';
        $request = $this->confirmTransportationOptionsRequest($body, $inbound_plan_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'confirmTransportationOptions'
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ConfirmTransportationOptionsRequest $body The body of the request to &#x60;confirmTransportationOptions&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function confirmTransportationOptionsRequest($body, $inbound_plan_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling confirmTransportationOptions'
            );
        }
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling confirmTransportationOptions'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'POST', $httpBody);
    }

    /**
     * Operation createInboundPlan
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CreateInboundPlanRequest $body The body of the request to &#x60;createInboundPlan&#x60;. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CreateInboundPlanResponse
     */
    public function createInboundPlan($body)
    {
        list($response) = $this->createInboundPlanWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createInboundPlanWithHttpInfo
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CreateInboundPlanRequest $body The body of the request to &#x60;createInboundPlan&#x60;. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CreateInboundPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createInboundPlanWithHttpInfo($body)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CreateInboundPlanResponse';
        $request = $this->createInboundPlanRequest($body);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation createInboundPlanAsync
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CreateInboundPlanRequest $body The body of the request to &#x60;createInboundPlan&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInboundPlanAsync($body)
    {
        return $this->createInboundPlanAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInboundPlanAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CreateInboundPlanRequest $body The body of the request to &#x60;createInboundPlan&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInboundPlanAsyncWithHttpInfo($body)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CreateInboundPlanResponse';
        $request = $this->createInboundPlanRequest($body);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'createInboundPlan'
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CreateInboundPlanRequest $body The body of the request to &#x60;createInboundPlan&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createInboundPlanRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createInboundPlan'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'POST', $httpBody);
    }

    /**
     * Operation createMarketplaceItemLabels
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CreateMarketplaceItemLabelsRequest $body The body of the request to &#x60;createMarketplaceItemLabels&#x60;. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CreateMarketplaceItemLabelsResponse
     */
    public function createMarketplaceItemLabels($body)
    {
        list($response) = $this->createMarketplaceItemLabelsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createMarketplaceItemLabelsWithHttpInfo
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CreateMarketplaceItemLabelsRequest $body The body of the request to &#x60;createMarketplaceItemLabels&#x60;. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CreateMarketplaceItemLabelsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMarketplaceItemLabelsWithHttpInfo($body)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CreateMarketplaceItemLabelsResponse';
        $request = $this->createMarketplaceItemLabelsRequest($body);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation createMarketplaceItemLabelsAsync
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CreateMarketplaceItemLabelsRequest $body The body of the request to &#x60;createMarketplaceItemLabels&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMarketplaceItemLabelsAsync($body)
    {
        return $this->createMarketplaceItemLabelsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createMarketplaceItemLabelsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CreateMarketplaceItemLabelsRequest $body The body of the request to &#x60;createMarketplaceItemLabels&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createMarketplaceItemLabelsAsyncWithHttpInfo($body)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CreateMarketplaceItemLabelsResponse';
        $request = $this->createMarketplaceItemLabelsRequest($body);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'createMarketplaceItemLabels'
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\CreateMarketplaceItemLabelsRequest $body The body of the request to &#x60;createMarketplaceItemLabels&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createMarketplaceItemLabelsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createMarketplaceItemLabels'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/items/labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'POST', $httpBody);
    }

    /**
     * Operation generateDeliveryWindowOptions
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id The shipment to generate delivery window options for. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateDeliveryWindowOptionsResponse
     */
    public function generateDeliveryWindowOptions($inbound_plan_id, $shipment_id)
    {
        list($response) = $this->generateDeliveryWindowOptionsWithHttpInfo($inbound_plan_id, $shipment_id);
        return $response;
    }

    /**
     * Operation generateDeliveryWindowOptionsWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id The shipment to generate delivery window options for. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateDeliveryWindowOptionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateDeliveryWindowOptionsWithHttpInfo($inbound_plan_id, $shipment_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateDeliveryWindowOptionsResponse';
        $request = $this->generateDeliveryWindowOptionsRequest($inbound_plan_id, $shipment_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation generateDeliveryWindowOptionsAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id The shipment to generate delivery window options for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateDeliveryWindowOptionsAsync($inbound_plan_id, $shipment_id)
    {
        return $this->generateDeliveryWindowOptionsAsyncWithHttpInfo($inbound_plan_id, $shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateDeliveryWindowOptionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id The shipment to generate delivery window options for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateDeliveryWindowOptionsAsyncWithHttpInfo($inbound_plan_id, $shipment_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateDeliveryWindowOptionsResponse';
        $request = $this->generateDeliveryWindowOptionsRequest($inbound_plan_id, $shipment_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'generateDeliveryWindowOptions'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id The shipment to generate delivery window options for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function generateDeliveryWindowOptionsRequest($inbound_plan_id, $shipment_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling generateDeliveryWindowOptions'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling generateDeliveryWindowOptions'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'POST', $httpBody);
    }

    /**
     * Operation generatePackingOptions
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GeneratePackingOptionsResponse
     */
    public function generatePackingOptions($inbound_plan_id)
    {
        list($response) = $this->generatePackingOptionsWithHttpInfo($inbound_plan_id);
        return $response;
    }

    /**
     * Operation generatePackingOptionsWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GeneratePackingOptionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function generatePackingOptionsWithHttpInfo($inbound_plan_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GeneratePackingOptionsResponse';
        $request = $this->generatePackingOptionsRequest($inbound_plan_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation generatePackingOptionsAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generatePackingOptionsAsync($inbound_plan_id)
    {
        return $this->generatePackingOptionsAsyncWithHttpInfo($inbound_plan_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generatePackingOptionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generatePackingOptionsAsyncWithHttpInfo($inbound_plan_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GeneratePackingOptionsResponse';
        $request = $this->generatePackingOptionsRequest($inbound_plan_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'generatePackingOptions'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function generatePackingOptionsRequest($inbound_plan_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling generatePackingOptions'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'POST', $httpBody);
    }

    /**
     * Operation generatePlacementOptions
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GeneratePlacementOptionsRequest $body The body of the request to &#x60;generatePlacementOptions&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GeneratePlacementOptionsResponse
     */
    public function generatePlacementOptions($body, $inbound_plan_id)
    {
        list($response) = $this->generatePlacementOptionsWithHttpInfo($body, $inbound_plan_id);
        return $response;
    }

    /**
     * Operation generatePlacementOptionsWithHttpInfo
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GeneratePlacementOptionsRequest $body The body of the request to &#x60;generatePlacementOptions&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GeneratePlacementOptionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function generatePlacementOptionsWithHttpInfo($body, $inbound_plan_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GeneratePlacementOptionsResponse';
        $request = $this->generatePlacementOptionsRequest($body, $inbound_plan_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation generatePlacementOptionsAsync
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GeneratePlacementOptionsRequest $body The body of the request to &#x60;generatePlacementOptions&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generatePlacementOptionsAsync($body, $inbound_plan_id)
    {
        return $this->generatePlacementOptionsAsyncWithHttpInfo($body, $inbound_plan_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generatePlacementOptionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GeneratePlacementOptionsRequest $body The body of the request to &#x60;generatePlacementOptions&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generatePlacementOptionsAsyncWithHttpInfo($body, $inbound_plan_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GeneratePlacementOptionsResponse';
        $request = $this->generatePlacementOptionsRequest($body, $inbound_plan_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'generatePlacementOptions'
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GeneratePlacementOptionsRequest $body The body of the request to &#x60;generatePlacementOptions&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function generatePlacementOptionsRequest($body, $inbound_plan_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling generatePlacementOptions'
            );
        }
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling generatePlacementOptions'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'POST', $httpBody);
    }

    /**
     * Operation generateSelfShipAppointmentSlots
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateSelfShipAppointmentSlotsRequest $body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateSelfShipAppointmentSlotsResponse
     */
    public function generateSelfShipAppointmentSlots($body, $inbound_plan_id, $shipment_id)
    {
        list($response) = $this->generateSelfShipAppointmentSlotsWithHttpInfo($body, $inbound_plan_id, $shipment_id);
        return $response;
    }

    /**
     * Operation generateSelfShipAppointmentSlotsWithHttpInfo
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateSelfShipAppointmentSlotsRequest $body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateSelfShipAppointmentSlotsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateSelfShipAppointmentSlotsWithHttpInfo($body, $inbound_plan_id, $shipment_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateSelfShipAppointmentSlotsResponse';
        $request = $this->generateSelfShipAppointmentSlotsRequest($body, $inbound_plan_id, $shipment_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation generateSelfShipAppointmentSlotsAsync
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateSelfShipAppointmentSlotsRequest $body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateSelfShipAppointmentSlotsAsync($body, $inbound_plan_id, $shipment_id)
    {
        return $this->generateSelfShipAppointmentSlotsAsyncWithHttpInfo($body, $inbound_plan_id, $shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateSelfShipAppointmentSlotsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateSelfShipAppointmentSlotsRequest $body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateSelfShipAppointmentSlotsAsyncWithHttpInfo($body, $inbound_plan_id, $shipment_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateSelfShipAppointmentSlotsResponse';
        $request = $this->generateSelfShipAppointmentSlotsRequest($body, $inbound_plan_id, $shipment_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'generateSelfShipAppointmentSlots'
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateSelfShipAppointmentSlotsRequest $body The body of the request to &#x60;generateSelfShipAppointmentSlots&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function generateSelfShipAppointmentSlotsRequest($body, $inbound_plan_id, $shipment_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling generateSelfShipAppointmentSlots'
            );
        }
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling generateSelfShipAppointmentSlots'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling generateSelfShipAppointmentSlots'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'POST', $httpBody);
    }

    /**
     * Operation generateShipmentContentUpdatePreviews
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateShipmentContentUpdatePreviewsRequest $body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateShipmentContentUpdatePreviewsResponse
     */
    public function generateShipmentContentUpdatePreviews($body, $inbound_plan_id, $shipment_id)
    {
        list($response) = $this->generateShipmentContentUpdatePreviewsWithHttpInfo($body, $inbound_plan_id, $shipment_id);
        return $response;
    }

    /**
     * Operation generateShipmentContentUpdatePreviewsWithHttpInfo
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateShipmentContentUpdatePreviewsRequest $body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateShipmentContentUpdatePreviewsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateShipmentContentUpdatePreviewsWithHttpInfo($body, $inbound_plan_id, $shipment_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateShipmentContentUpdatePreviewsResponse';
        $request = $this->generateShipmentContentUpdatePreviewsRequest($body, $inbound_plan_id, $shipment_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation generateShipmentContentUpdatePreviewsAsync
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateShipmentContentUpdatePreviewsRequest $body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateShipmentContentUpdatePreviewsAsync($body, $inbound_plan_id, $shipment_id)
    {
        return $this->generateShipmentContentUpdatePreviewsAsyncWithHttpInfo($body, $inbound_plan_id, $shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateShipmentContentUpdatePreviewsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateShipmentContentUpdatePreviewsRequest $body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateShipmentContentUpdatePreviewsAsyncWithHttpInfo($body, $inbound_plan_id, $shipment_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateShipmentContentUpdatePreviewsResponse';
        $request = $this->generateShipmentContentUpdatePreviewsRequest($body, $inbound_plan_id, $shipment_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'generateShipmentContentUpdatePreviews'
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateShipmentContentUpdatePreviewsRequest $body The body of the request to &#x60;generateShipmentContentUpdatePreviews&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function generateShipmentContentUpdatePreviewsRequest($body, $inbound_plan_id, $shipment_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling generateShipmentContentUpdatePreviews'
            );
        }
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling generateShipmentContentUpdatePreviews'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling generateShipmentContentUpdatePreviews'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'POST', $httpBody);
    }

    /**
     * Operation generateTransportationOptions
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateTransportationOptionsRequest $body The body of the request to &#x60;generateTransportationOptions&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateTransportationOptionsResponse
     */
    public function generateTransportationOptions($body, $inbound_plan_id)
    {
        list($response) = $this->generateTransportationOptionsWithHttpInfo($body, $inbound_plan_id);
        return $response;
    }

    /**
     * Operation generateTransportationOptionsWithHttpInfo
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateTransportationOptionsRequest $body The body of the request to &#x60;generateTransportationOptions&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateTransportationOptionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateTransportationOptionsWithHttpInfo($body, $inbound_plan_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateTransportationOptionsResponse';
        $request = $this->generateTransportationOptionsRequest($body, $inbound_plan_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation generateTransportationOptionsAsync
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateTransportationOptionsRequest $body The body of the request to &#x60;generateTransportationOptions&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateTransportationOptionsAsync($body, $inbound_plan_id)
    {
        return $this->generateTransportationOptionsAsyncWithHttpInfo($body, $inbound_plan_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateTransportationOptionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateTransportationOptionsRequest $body The body of the request to &#x60;generateTransportationOptions&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateTransportationOptionsAsyncWithHttpInfo($body, $inbound_plan_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateTransportationOptionsResponse';
        $request = $this->generateTransportationOptionsRequest($body, $inbound_plan_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'generateTransportationOptions'
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GenerateTransportationOptionsRequest $body The body of the request to &#x60;generateTransportationOptions&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function generateTransportationOptionsRequest($body, $inbound_plan_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling generateTransportationOptions'
            );
        }
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling generateTransportationOptions'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'POST', $httpBody);
    }

    /**
     * Operation getDeliveryChallanDocument
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GetDeliveryChallanDocumentResponse
     */
    public function getDeliveryChallanDocument($inbound_plan_id, $shipment_id)
    {
        list($response) = $this->getDeliveryChallanDocumentWithHttpInfo($inbound_plan_id, $shipment_id);
        return $response;
    }

    /**
     * Operation getDeliveryChallanDocumentWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GetDeliveryChallanDocumentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeliveryChallanDocumentWithHttpInfo($inbound_plan_id, $shipment_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GetDeliveryChallanDocumentResponse';
        $request = $this->getDeliveryChallanDocumentRequest($inbound_plan_id, $shipment_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation getDeliveryChallanDocumentAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeliveryChallanDocumentAsync($inbound_plan_id, $shipment_id)
    {
        return $this->getDeliveryChallanDocumentAsyncWithHttpInfo($inbound_plan_id, $shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeliveryChallanDocumentAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeliveryChallanDocumentAsyncWithHttpInfo($inbound_plan_id, $shipment_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GetDeliveryChallanDocumentResponse';
        $request = $this->getDeliveryChallanDocumentRequest($inbound_plan_id, $shipment_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'getDeliveryChallanDocument'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDeliveryChallanDocumentRequest($inbound_plan_id, $shipment_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling getDeliveryChallanDocument'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling getDeliveryChallanDocument'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryChallanDocument';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation getInboundOperationStatus
     *
     * @param  string $operation_id Identifier of an asynchronous operation. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\InboundOperationStatus
     */
    public function getInboundOperationStatus($operation_id)
    {
        list($response) = $this->getInboundOperationStatusWithHttpInfo($operation_id);
        return $response;
    }

    /**
     * Operation getInboundOperationStatusWithHttpInfo
     *
     * @param  string $operation_id Identifier of an asynchronous operation. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\InboundOperationStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInboundOperationStatusWithHttpInfo($operation_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\InboundOperationStatus';
        $request = $this->getInboundOperationStatusRequest($operation_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation getInboundOperationStatusAsync
     *
     * 
     *
     * @param  string $operation_id Identifier of an asynchronous operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInboundOperationStatusAsync($operation_id)
    {
        return $this->getInboundOperationStatusAsyncWithHttpInfo($operation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInboundOperationStatusAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $operation_id Identifier of an asynchronous operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInboundOperationStatusAsyncWithHttpInfo($operation_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\InboundOperationStatus';
        $request = $this->getInboundOperationStatusRequest($operation_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'getInboundOperationStatus'
     *
     * @param  string $operation_id Identifier of an asynchronous operation. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInboundOperationStatusRequest($operation_id)
    {
        // verify the required parameter 'operation_id' is set
        if ($operation_id === null || (is_array($operation_id) && count($operation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operation_id when calling getInboundOperationStatus'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/operations/{operationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($operation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'operationId' . '}',
                ObjectSerializer::toPathValue($operation_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation getInboundPlan
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\InboundPlan
     */
    public function getInboundPlan($inbound_plan_id)
    {
        list($response) = $this->getInboundPlanWithHttpInfo($inbound_plan_id);
        return $response;
    }

    /**
     * Operation getInboundPlanWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\InboundPlan, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInboundPlanWithHttpInfo($inbound_plan_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\InboundPlan';
        $request = $this->getInboundPlanRequest($inbound_plan_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation getInboundPlanAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInboundPlanAsync($inbound_plan_id)
    {
        return $this->getInboundPlanAsyncWithHttpInfo($inbound_plan_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInboundPlanAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInboundPlanAsyncWithHttpInfo($inbound_plan_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\InboundPlan';
        $request = $this->getInboundPlanRequest($inbound_plan_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'getInboundPlan'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInboundPlanRequest($inbound_plan_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling getInboundPlan'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation getSelfShipAppointmentSlots
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GetSelfShipAppointmentSlotsResponse
     */
    public function getSelfShipAppointmentSlots($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        list($response) = $this->getSelfShipAppointmentSlotsWithHttpInfo($inbound_plan_id, $shipment_id, $page_size, $pagination_token);
        return $response;
    }

    /**
     * Operation getSelfShipAppointmentSlotsWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GetSelfShipAppointmentSlotsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSelfShipAppointmentSlotsWithHttpInfo($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GetSelfShipAppointmentSlotsResponse';
        $request = $this->getSelfShipAppointmentSlotsRequest($inbound_plan_id, $shipment_id, $page_size, $pagination_token);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation getSelfShipAppointmentSlotsAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSelfShipAppointmentSlotsAsync($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        return $this->getSelfShipAppointmentSlotsAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $page_size, $pagination_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSelfShipAppointmentSlotsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSelfShipAppointmentSlotsAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\GetSelfShipAppointmentSlotsResponse';
        $request = $this->getSelfShipAppointmentSlotsRequest($inbound_plan_id, $shipment_id, $page_size, $pagination_token);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'getSelfShipAppointmentSlots'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of self ship appointment slots to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSelfShipAppointmentSlotsRequest($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling getSelfShipAppointmentSlots'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling getSelfShipAppointmentSlots'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token, null);
        }

        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation getShipment
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\Shipment
     */
    public function getShipment($inbound_plan_id, $shipment_id)
    {
        list($response) = $this->getShipmentWithHttpInfo($inbound_plan_id, $shipment_id);
        return $response;
    }

    /**
     * Operation getShipmentWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\Shipment, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShipmentWithHttpInfo($inbound_plan_id, $shipment_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\Shipment';
        $request = $this->getShipmentRequest($inbound_plan_id, $shipment_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation getShipmentAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShipmentAsync($inbound_plan_id, $shipment_id)
    {
        return $this->getShipmentAsyncWithHttpInfo($inbound_plan_id, $shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShipmentAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShipmentAsyncWithHttpInfo($inbound_plan_id, $shipment_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\Shipment';
        $request = $this->getShipmentRequest($inbound_plan_id, $shipment_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'getShipment'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getShipmentRequest($inbound_plan_id, $shipment_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling getShipment'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling getShipment'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation getShipmentContentUpdatePreview
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  string $content_update_preview_id Identifier of a content update preview. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ContentUpdatePreview
     */
    public function getShipmentContentUpdatePreview($inbound_plan_id, $shipment_id, $content_update_preview_id)
    {
        list($response) = $this->getShipmentContentUpdatePreviewWithHttpInfo($inbound_plan_id, $shipment_id, $content_update_preview_id);
        return $response;
    }

    /**
     * Operation getShipmentContentUpdatePreviewWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  string $content_update_preview_id Identifier of a content update preview. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ContentUpdatePreview, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShipmentContentUpdatePreviewWithHttpInfo($inbound_plan_id, $shipment_id, $content_update_preview_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ContentUpdatePreview';
        $request = $this->getShipmentContentUpdatePreviewRequest($inbound_plan_id, $shipment_id, $content_update_preview_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation getShipmentContentUpdatePreviewAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  string $content_update_preview_id Identifier of a content update preview. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShipmentContentUpdatePreviewAsync($inbound_plan_id, $shipment_id, $content_update_preview_id)
    {
        return $this->getShipmentContentUpdatePreviewAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $content_update_preview_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShipmentContentUpdatePreviewAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  string $content_update_preview_id Identifier of a content update preview. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShipmentContentUpdatePreviewAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $content_update_preview_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ContentUpdatePreview';
        $request = $this->getShipmentContentUpdatePreviewRequest($inbound_plan_id, $shipment_id, $content_update_preview_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'getShipmentContentUpdatePreview'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  string $content_update_preview_id Identifier of a content update preview. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getShipmentContentUpdatePreviewRequest($inbound_plan_id, $shipment_id, $content_update_preview_id)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling getShipmentContentUpdatePreview'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling getShipmentContentUpdatePreview'
            );
        }
        // verify the required parameter 'content_update_preview_id' is set
        if ($content_update_preview_id === null || (is_array($content_update_preview_id) && count($content_update_preview_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_update_preview_id when calling getShipmentContentUpdatePreview'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }
        // path params
        if ($content_update_preview_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contentUpdatePreviewId' . '}',
                ObjectSerializer::toPathValue($content_update_preview_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation listDeliveryWindowOptions
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id The shipment to get delivery window options for. (required)
     * @param  int $page_size The number of delivery window options to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListDeliveryWindowOptionsResponse
     */
    public function listDeliveryWindowOptions($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        list($response) = $this->listDeliveryWindowOptionsWithHttpInfo($inbound_plan_id, $shipment_id, $page_size, $pagination_token);
        return $response;
    }

    /**
     * Operation listDeliveryWindowOptionsWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id The shipment to get delivery window options for. (required)
     * @param  int $page_size The number of delivery window options to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListDeliveryWindowOptionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDeliveryWindowOptionsWithHttpInfo($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListDeliveryWindowOptionsResponse';
        $request = $this->listDeliveryWindowOptionsRequest($inbound_plan_id, $shipment_id, $page_size, $pagination_token);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation listDeliveryWindowOptionsAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id The shipment to get delivery window options for. (required)
     * @param  int $page_size The number of delivery window options to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryWindowOptionsAsync($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        return $this->listDeliveryWindowOptionsAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $page_size, $pagination_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDeliveryWindowOptionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id The shipment to get delivery window options for. (required)
     * @param  int $page_size The number of delivery window options to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDeliveryWindowOptionsAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListDeliveryWindowOptionsResponse';
        $request = $this->listDeliveryWindowOptionsRequest($inbound_plan_id, $shipment_id, $page_size, $pagination_token);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'listDeliveryWindowOptions'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id The shipment to get delivery window options for. (required)
     * @param  int $page_size The number of delivery window options to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listDeliveryWindowOptionsRequest($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listDeliveryWindowOptions'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling listDeliveryWindowOptions'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token, null);
        }

        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation listInboundPlanBoxes
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListInboundPlanBoxesResponse
     */
    public function listInboundPlanBoxes($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        list($response) = $this->listInboundPlanBoxesWithHttpInfo($inbound_plan_id, $page_size, $pagination_token);
        return $response;
    }

    /**
     * Operation listInboundPlanBoxesWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListInboundPlanBoxesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listInboundPlanBoxesWithHttpInfo($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListInboundPlanBoxesResponse';
        $request = $this->listInboundPlanBoxesRequest($inbound_plan_id, $page_size, $pagination_token);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation listInboundPlanBoxesAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInboundPlanBoxesAsync($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        return $this->listInboundPlanBoxesAsyncWithHttpInfo($inbound_plan_id, $page_size, $pagination_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInboundPlanBoxesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInboundPlanBoxesAsyncWithHttpInfo($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListInboundPlanBoxesResponse';
        $request = $this->listInboundPlanBoxesRequest($inbound_plan_id, $page_size, $pagination_token);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'listInboundPlanBoxes'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listInboundPlanBoxesRequest($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listInboundPlanBoxes'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token, null);
        }

        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation listInboundPlanItems
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of items to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListInboundPlanItemsResponse
     */
    public function listInboundPlanItems($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        list($response) = $this->listInboundPlanItemsWithHttpInfo($inbound_plan_id, $page_size, $pagination_token);
        return $response;
    }

    /**
     * Operation listInboundPlanItemsWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of items to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListInboundPlanItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listInboundPlanItemsWithHttpInfo($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListInboundPlanItemsResponse';
        $request = $this->listInboundPlanItemsRequest($inbound_plan_id, $page_size, $pagination_token);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation listInboundPlanItemsAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of items to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInboundPlanItemsAsync($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        return $this->listInboundPlanItemsAsyncWithHttpInfo($inbound_plan_id, $page_size, $pagination_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInboundPlanItemsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of items to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInboundPlanItemsAsyncWithHttpInfo($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListInboundPlanItemsResponse';
        $request = $this->listInboundPlanItemsRequest($inbound_plan_id, $page_size, $pagination_token);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'listInboundPlanItems'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of items to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listInboundPlanItemsRequest($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listInboundPlanItems'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token, null);
        }

        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation listInboundPlanPallets
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListInboundPlanPalletsResponse
     */
    public function listInboundPlanPallets($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        list($response) = $this->listInboundPlanPalletsWithHttpInfo($inbound_plan_id, $page_size, $pagination_token);
        return $response;
    }

    /**
     * Operation listInboundPlanPalletsWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListInboundPlanPalletsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listInboundPlanPalletsWithHttpInfo($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListInboundPlanPalletsResponse';
        $request = $this->listInboundPlanPalletsRequest($inbound_plan_id, $page_size, $pagination_token);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation listInboundPlanPalletsAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInboundPlanPalletsAsync($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        return $this->listInboundPlanPalletsAsyncWithHttpInfo($inbound_plan_id, $page_size, $pagination_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInboundPlanPalletsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInboundPlanPalletsAsyncWithHttpInfo($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListInboundPlanPalletsResponse';
        $request = $this->listInboundPlanPalletsRequest($inbound_plan_id, $page_size, $pagination_token);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'listInboundPlanPallets'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listInboundPlanPalletsRequest($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listInboundPlanPallets'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token, null);
        }

        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation listInboundPlans
     *
     * @param  int $page_size The number of inbound plans to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param  string $status The status of an inbound plan. (optional)
     * @param  string $sort_by Sort by field. (optional)
     * @param  string $sort_order The sort order. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListInboundPlansResponse
     */
    public function listInboundPlans($page_size = '10', $pagination_token = null, $status = null, $sort_by = null, $sort_order = null)
    {
        list($response) = $this->listInboundPlansWithHttpInfo($page_size, $pagination_token, $status, $sort_by, $sort_order);
        return $response;
    }

    /**
     * Operation listInboundPlansWithHttpInfo
     *
     * @param  int $page_size The number of inbound plans to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param  string $status The status of an inbound plan. (optional)
     * @param  string $sort_by Sort by field. (optional)
     * @param  string $sort_order The sort order. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListInboundPlansResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listInboundPlansWithHttpInfo($page_size = '10', $pagination_token = null, $status = null, $sort_by = null, $sort_order = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListInboundPlansResponse';
        $request = $this->listInboundPlansRequest($page_size, $pagination_token, $status, $sort_by, $sort_order);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation listInboundPlansAsync
     *
     * 
     *
     * @param  int $page_size The number of inbound plans to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param  string $status The status of an inbound plan. (optional)
     * @param  string $sort_by Sort by field. (optional)
     * @param  string $sort_order The sort order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInboundPlansAsync($page_size = '10', $pagination_token = null, $status = null, $sort_by = null, $sort_order = null)
    {
        return $this->listInboundPlansAsyncWithHttpInfo($page_size, $pagination_token, $status, $sort_by, $sort_order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInboundPlansAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $page_size The number of inbound plans to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param  string $status The status of an inbound plan. (optional)
     * @param  string $sort_by Sort by field. (optional)
     * @param  string $sort_order The sort order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInboundPlansAsyncWithHttpInfo($page_size = '10', $pagination_token = null, $status = null, $sort_by = null, $sort_order = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListInboundPlansResponse';
        $request = $this->listInboundPlansRequest($page_size, $pagination_token, $status, $sort_by, $sort_order);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'listInboundPlans'
     *
     * @param  int $page_size The number of inbound plans to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param  string $status The status of an inbound plan. (optional)
     * @param  string $sort_by Sort by field. (optional)
     * @param  string $sort_order The sort order. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listInboundPlansRequest($page_size = '10', $pagination_token = null, $status = null, $sort_by = null, $sort_order = null)
    {

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token, null);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status, null);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by, null);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sort_order, null);
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation listItemComplianceDetails
     *
     * @param  string[] $mskus List of merchant SKUs - a merchant-supplied identifier for a specific SKU. (required)
     * @param  string $marketplace_id The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListItemComplianceDetailsResponse
     */
    public function listItemComplianceDetails($mskus, $marketplace_id)
    {
        list($response) = $this->listItemComplianceDetailsWithHttpInfo($mskus, $marketplace_id);
        return $response;
    }

    /**
     * Operation listItemComplianceDetailsWithHttpInfo
     *
     * @param  string[] $mskus List of merchant SKUs - a merchant-supplied identifier for a specific SKU. (required)
     * @param  string $marketplace_id The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListItemComplianceDetailsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listItemComplianceDetailsWithHttpInfo($mskus, $marketplace_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListItemComplianceDetailsResponse';
        $request = $this->listItemComplianceDetailsRequest($mskus, $marketplace_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation listItemComplianceDetailsAsync
     *
     * 
     *
     * @param  string[] $mskus List of merchant SKUs - a merchant-supplied identifier for a specific SKU. (required)
     * @param  string $marketplace_id The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listItemComplianceDetailsAsync($mskus, $marketplace_id)
    {
        return $this->listItemComplianceDetailsAsyncWithHttpInfo($mskus, $marketplace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listItemComplianceDetailsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string[] $mskus List of merchant SKUs - a merchant-supplied identifier for a specific SKU. (required)
     * @param  string $marketplace_id The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listItemComplianceDetailsAsyncWithHttpInfo($mskus, $marketplace_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListItemComplianceDetailsResponse';
        $request = $this->listItemComplianceDetailsRequest($mskus, $marketplace_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'listItemComplianceDetails'
     *
     * @param  string[] $mskus List of merchant SKUs - a merchant-supplied identifier for a specific SKU. (required)
     * @param  string $marketplace_id The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listItemComplianceDetailsRequest($mskus, $marketplace_id)
    {
        // verify the required parameter 'mskus' is set
        if ($mskus === null || (is_array($mskus) && count($mskus) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mskus when calling listItemComplianceDetails'
            );
        }
        // verify the required parameter 'marketplace_id' is set
        if ($marketplace_id === null || (is_array($marketplace_id) && count($marketplace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_id when calling listItemComplianceDetails'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/items/compliance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($mskus)) {
            $mskus = ObjectSerializer::serializeCollection($mskus, 'multi', true);
        }
        if ($mskus !== null) {
            $queryParams['mskus'] = ObjectSerializer::toQueryValue($mskus, null);
        }
        // query params
        if ($marketplace_id !== null) {
            $queryParams['marketplaceId'] = ObjectSerializer::toQueryValue($marketplace_id, null);
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation listPackingGroupBoxes
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $packing_group_id Identifier of a packing group. (required)
     * @param  int $page_size The number of packing group boxes to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListPackingGroupBoxesResponse
     */
    public function listPackingGroupBoxes($inbound_plan_id, $packing_group_id, $page_size = '10', $pagination_token = null)
    {
        list($response) = $this->listPackingGroupBoxesWithHttpInfo($inbound_plan_id, $packing_group_id, $page_size, $pagination_token);
        return $response;
    }

    /**
     * Operation listPackingGroupBoxesWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $packing_group_id Identifier of a packing group. (required)
     * @param  int $page_size The number of packing group boxes to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListPackingGroupBoxesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPackingGroupBoxesWithHttpInfo($inbound_plan_id, $packing_group_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListPackingGroupBoxesResponse';
        $request = $this->listPackingGroupBoxesRequest($inbound_plan_id, $packing_group_id, $page_size, $pagination_token);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation listPackingGroupBoxesAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $packing_group_id Identifier of a packing group. (required)
     * @param  int $page_size The number of packing group boxes to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPackingGroupBoxesAsync($inbound_plan_id, $packing_group_id, $page_size = '10', $pagination_token = null)
    {
        return $this->listPackingGroupBoxesAsyncWithHttpInfo($inbound_plan_id, $packing_group_id, $page_size, $pagination_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPackingGroupBoxesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $packing_group_id Identifier of a packing group. (required)
     * @param  int $page_size The number of packing group boxes to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPackingGroupBoxesAsyncWithHttpInfo($inbound_plan_id, $packing_group_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListPackingGroupBoxesResponse';
        $request = $this->listPackingGroupBoxesRequest($inbound_plan_id, $packing_group_id, $page_size, $pagination_token);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'listPackingGroupBoxes'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $packing_group_id Identifier of a packing group. (required)
     * @param  int $page_size The number of packing group boxes to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listPackingGroupBoxesRequest($inbound_plan_id, $packing_group_id, $page_size = '10', $pagination_token = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listPackingGroupBoxes'
            );
        }
        // verify the required parameter 'packing_group_id' is set
        if ($packing_group_id === null || (is_array($packing_group_id) && count($packing_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packing_group_id when calling listPackingGroupBoxes'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/boxes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token, null);
        }

        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($packing_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packingGroupId' . '}',
                ObjectSerializer::toPathValue($packing_group_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation listPackingGroupItems
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $packing_group_id Identifier of a packing group. (required)
     * @param  int $page_size The number of packing group items to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListPackingGroupItemsResponse
     */
    public function listPackingGroupItems($inbound_plan_id, $packing_group_id, $page_size = '10', $pagination_token = null)
    {
        list($response) = $this->listPackingGroupItemsWithHttpInfo($inbound_plan_id, $packing_group_id, $page_size, $pagination_token);
        return $response;
    }

    /**
     * Operation listPackingGroupItemsWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $packing_group_id Identifier of a packing group. (required)
     * @param  int $page_size The number of packing group items to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListPackingGroupItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPackingGroupItemsWithHttpInfo($inbound_plan_id, $packing_group_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListPackingGroupItemsResponse';
        $request = $this->listPackingGroupItemsRequest($inbound_plan_id, $packing_group_id, $page_size, $pagination_token);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation listPackingGroupItemsAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $packing_group_id Identifier of a packing group. (required)
     * @param  int $page_size The number of packing group items to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPackingGroupItemsAsync($inbound_plan_id, $packing_group_id, $page_size = '10', $pagination_token = null)
    {
        return $this->listPackingGroupItemsAsyncWithHttpInfo($inbound_plan_id, $packing_group_id, $page_size, $pagination_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPackingGroupItemsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $packing_group_id Identifier of a packing group. (required)
     * @param  int $page_size The number of packing group items to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPackingGroupItemsAsyncWithHttpInfo($inbound_plan_id, $packing_group_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListPackingGroupItemsResponse';
        $request = $this->listPackingGroupItemsRequest($inbound_plan_id, $packing_group_id, $page_size, $pagination_token);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'listPackingGroupItems'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $packing_group_id Identifier of a packing group. (required)
     * @param  int $page_size The number of packing group items to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listPackingGroupItemsRequest($inbound_plan_id, $packing_group_id, $page_size = '10', $pagination_token = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listPackingGroupItems'
            );
        }
        // verify the required parameter 'packing_group_id' is set
        if ($packing_group_id === null || (is_array($packing_group_id) && count($packing_group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packing_group_id when calling listPackingGroupItems'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingGroups/{packingGroupId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token, null);
        }

        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($packing_group_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packingGroupId' . '}',
                ObjectSerializer::toPathValue($packing_group_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation listPackingOptions
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of packing options to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListPackingOptionsResponse
     */
    public function listPackingOptions($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        list($response) = $this->listPackingOptionsWithHttpInfo($inbound_plan_id, $page_size, $pagination_token);
        return $response;
    }

    /**
     * Operation listPackingOptionsWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of packing options to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListPackingOptionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPackingOptionsWithHttpInfo($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListPackingOptionsResponse';
        $request = $this->listPackingOptionsRequest($inbound_plan_id, $page_size, $pagination_token);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation listPackingOptionsAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of packing options to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPackingOptionsAsync($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        return $this->listPackingOptionsAsyncWithHttpInfo($inbound_plan_id, $page_size, $pagination_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPackingOptionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of packing options to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPackingOptionsAsyncWithHttpInfo($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListPackingOptionsResponse';
        $request = $this->listPackingOptionsRequest($inbound_plan_id, $page_size, $pagination_token);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'listPackingOptions'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of packing options to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listPackingOptionsRequest($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listPackingOptions'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token, null);
        }

        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation listPlacementOptions
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of placement options to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListPlacementOptionsResponse
     */
    public function listPlacementOptions($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        list($response) = $this->listPlacementOptionsWithHttpInfo($inbound_plan_id, $page_size, $pagination_token);
        return $response;
    }

    /**
     * Operation listPlacementOptionsWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of placement options to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListPlacementOptionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPlacementOptionsWithHttpInfo($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListPlacementOptionsResponse';
        $request = $this->listPlacementOptionsRequest($inbound_plan_id, $page_size, $pagination_token);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation listPlacementOptionsAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of placement options to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPlacementOptionsAsync($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        return $this->listPlacementOptionsAsyncWithHttpInfo($inbound_plan_id, $page_size, $pagination_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPlacementOptionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of placement options to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPlacementOptionsAsyncWithHttpInfo($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListPlacementOptionsResponse';
        $request = $this->listPlacementOptionsRequest($inbound_plan_id, $page_size, $pagination_token);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'listPlacementOptions'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of placement options to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listPlacementOptionsRequest($inbound_plan_id, $page_size = '10', $pagination_token = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listPlacementOptions'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token, null);
        }

        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation listShipmentBoxes
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListShipmentBoxesResponse
     */
    public function listShipmentBoxes($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        list($response) = $this->listShipmentBoxesWithHttpInfo($inbound_plan_id, $shipment_id, $page_size, $pagination_token);
        return $response;
    }

    /**
     * Operation listShipmentBoxesWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListShipmentBoxesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listShipmentBoxesWithHttpInfo($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListShipmentBoxesResponse';
        $request = $this->listShipmentBoxesRequest($inbound_plan_id, $shipment_id, $page_size, $pagination_token);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation listShipmentBoxesAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listShipmentBoxesAsync($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        return $this->listShipmentBoxesAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $page_size, $pagination_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listShipmentBoxesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listShipmentBoxesAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListShipmentBoxesResponse';
        $request = $this->listShipmentBoxesRequest($inbound_plan_id, $shipment_id, $page_size, $pagination_token);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'listShipmentBoxes'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of boxes to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listShipmentBoxesRequest($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listShipmentBoxes'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling listShipmentBoxes'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token, null);
        }

        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation listShipmentContentUpdatePreviews
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of content update previews to return. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListShipmentContentUpdatePreviewsResponse
     */
    public function listShipmentContentUpdatePreviews($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        list($response) = $this->listShipmentContentUpdatePreviewsWithHttpInfo($inbound_plan_id, $shipment_id, $page_size, $pagination_token);
        return $response;
    }

    /**
     * Operation listShipmentContentUpdatePreviewsWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of content update previews to return. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListShipmentContentUpdatePreviewsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listShipmentContentUpdatePreviewsWithHttpInfo($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListShipmentContentUpdatePreviewsResponse';
        $request = $this->listShipmentContentUpdatePreviewsRequest($inbound_plan_id, $shipment_id, $page_size, $pagination_token);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation listShipmentContentUpdatePreviewsAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of content update previews to return. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listShipmentContentUpdatePreviewsAsync($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        return $this->listShipmentContentUpdatePreviewsAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $page_size, $pagination_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listShipmentContentUpdatePreviewsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of content update previews to return. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listShipmentContentUpdatePreviewsAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListShipmentContentUpdatePreviewsResponse';
        $request = $this->listShipmentContentUpdatePreviewsRequest($inbound_plan_id, $shipment_id, $page_size, $pagination_token);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'listShipmentContentUpdatePreviews'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of content update previews to return. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listShipmentContentUpdatePreviewsRequest($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listShipmentContentUpdatePreviews'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling listShipmentContentUpdatePreviews'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token, null);
        }

        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation listShipmentItems
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of items to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListShipmentItemsResponse
     */
    public function listShipmentItems($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        list($response) = $this->listShipmentItemsWithHttpInfo($inbound_plan_id, $shipment_id, $page_size, $pagination_token);
        return $response;
    }

    /**
     * Operation listShipmentItemsWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of items to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListShipmentItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listShipmentItemsWithHttpInfo($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListShipmentItemsResponse';
        $request = $this->listShipmentItemsRequest($inbound_plan_id, $shipment_id, $page_size, $pagination_token);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation listShipmentItemsAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of items to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listShipmentItemsAsync($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        return $this->listShipmentItemsAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $page_size, $pagination_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listShipmentItemsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of items to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listShipmentItemsAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListShipmentItemsResponse';
        $request = $this->listShipmentItemsRequest($inbound_plan_id, $shipment_id, $page_size, $pagination_token);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'listShipmentItems'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of items to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listShipmentItemsRequest($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listShipmentItems'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling listShipmentItems'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token, null);
        }

        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation listShipmentPallets
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListShipmentPalletsResponse
     */
    public function listShipmentPallets($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        list($response) = $this->listShipmentPalletsWithHttpInfo($inbound_plan_id, $shipment_id, $page_size, $pagination_token);
        return $response;
    }

    /**
     * Operation listShipmentPalletsWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListShipmentPalletsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listShipmentPalletsWithHttpInfo($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListShipmentPalletsResponse';
        $request = $this->listShipmentPalletsRequest($inbound_plan_id, $shipment_id, $page_size, $pagination_token);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation listShipmentPalletsAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listShipmentPalletsAsync($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        return $this->listShipmentPalletsAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $page_size, $pagination_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listShipmentPalletsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listShipmentPalletsAsyncWithHttpInfo($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListShipmentPalletsResponse';
        $request = $this->listShipmentPalletsRequest($inbound_plan_id, $shipment_id, $page_size, $pagination_token);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'listShipmentPallets'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  int $page_size The number of pallets to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listShipmentPalletsRequest($inbound_plan_id, $shipment_id, $page_size = '10', $pagination_token = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listShipmentPallets'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling listShipmentPallets'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/pallets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token, null);
        }

        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation listTransportationOptions
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of transportation options to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param  string $placement_option_id The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     * @param  string $shipment_id The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListTransportationOptionsResponse
     */
    public function listTransportationOptions($inbound_plan_id, $page_size = '10', $pagination_token = null, $placement_option_id = null, $shipment_id = null)
    {
        list($response) = $this->listTransportationOptionsWithHttpInfo($inbound_plan_id, $page_size, $pagination_token, $placement_option_id, $shipment_id);
        return $response;
    }

    /**
     * Operation listTransportationOptionsWithHttpInfo
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of transportation options to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param  string $placement_option_id The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     * @param  string $shipment_id The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListTransportationOptionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listTransportationOptionsWithHttpInfo($inbound_plan_id, $page_size = '10', $pagination_token = null, $placement_option_id = null, $shipment_id = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListTransportationOptionsResponse';
        $request = $this->listTransportationOptionsRequest($inbound_plan_id, $page_size, $pagination_token, $placement_option_id, $shipment_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation listTransportationOptionsAsync
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of transportation options to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param  string $placement_option_id The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     * @param  string $shipment_id The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTransportationOptionsAsync($inbound_plan_id, $page_size = '10', $pagination_token = null, $placement_option_id = null, $shipment_id = null)
    {
        return $this->listTransportationOptionsAsyncWithHttpInfo($inbound_plan_id, $page_size, $pagination_token, $placement_option_id, $shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTransportationOptionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of transportation options to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param  string $placement_option_id The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     * @param  string $shipment_id The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTransportationOptionsAsyncWithHttpInfo($inbound_plan_id, $page_size = '10', $pagination_token = null, $placement_option_id = null, $shipment_id = null)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ListTransportationOptionsResponse';
        $request = $this->listTransportationOptionsRequest($inbound_plan_id, $page_size, $pagination_token, $placement_option_id, $shipment_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'listTransportationOptions'
     *
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  int $page_size The number of transportation options to return in the response matching the given query. (optional, default to 10)
     * @param  string $pagination_token A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result. (optional)
     * @param  string $placement_option_id The placement option to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     * @param  string $shipment_id The shipment to get transportation options for. Either &#x60;placementOptionId&#x60; or &#x60;shipmentId&#x60; must be specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listTransportationOptionsRequest($inbound_plan_id, $page_size = '10', $pagination_token = null, $placement_option_id = null, $shipment_id = null)
    {
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling listTransportationOptions'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, null);
        }
        // query params
        if ($pagination_token !== null) {
            $queryParams['paginationToken'] = ObjectSerializer::toQueryValue($pagination_token, null);
        }
        // query params
        if ($placement_option_id !== null) {
            $queryParams['placementOptionId'] = ObjectSerializer::toQueryValue($placement_option_id, null);
        }
        // query params
        if ($shipment_id !== null) {
            $queryParams['shipmentId'] = ObjectSerializer::toQueryValue($shipment_id, null);
        }

        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'GET', $httpBody);
    }

    /**
     * Operation scheduleSelfShipAppointment
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ScheduleSelfShipAppointmentRequest $body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  string $slot_id An identifier to a self-ship appointment slot. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ScheduleSelfShipAppointmentResponse
     */
    public function scheduleSelfShipAppointment($body, $inbound_plan_id, $shipment_id, $slot_id)
    {
        list($response) = $this->scheduleSelfShipAppointmentWithHttpInfo($body, $inbound_plan_id, $shipment_id, $slot_id);
        return $response;
    }

    /**
     * Operation scheduleSelfShipAppointmentWithHttpInfo
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ScheduleSelfShipAppointmentRequest $body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  string $slot_id An identifier to a self-ship appointment slot. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ScheduleSelfShipAppointmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function scheduleSelfShipAppointmentWithHttpInfo($body, $inbound_plan_id, $shipment_id, $slot_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ScheduleSelfShipAppointmentResponse';
        $request = $this->scheduleSelfShipAppointmentRequest($body, $inbound_plan_id, $shipment_id, $slot_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation scheduleSelfShipAppointmentAsync
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ScheduleSelfShipAppointmentRequest $body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  string $slot_id An identifier to a self-ship appointment slot. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleSelfShipAppointmentAsync($body, $inbound_plan_id, $shipment_id, $slot_id)
    {
        return $this->scheduleSelfShipAppointmentAsyncWithHttpInfo($body, $inbound_plan_id, $shipment_id, $slot_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation scheduleSelfShipAppointmentAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ScheduleSelfShipAppointmentRequest $body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  string $slot_id An identifier to a self-ship appointment slot. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function scheduleSelfShipAppointmentAsyncWithHttpInfo($body, $inbound_plan_id, $shipment_id, $slot_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ScheduleSelfShipAppointmentResponse';
        $request = $this->scheduleSelfShipAppointmentRequest($body, $inbound_plan_id, $shipment_id, $slot_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'scheduleSelfShipAppointment'
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\ScheduleSelfShipAppointmentRequest $body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     * @param  string $slot_id An identifier to a self-ship appointment slot. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function scheduleSelfShipAppointmentRequest($body, $inbound_plan_id, $shipment_id, $slot_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling scheduleSelfShipAppointment'
            );
        }
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling scheduleSelfShipAppointment'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling scheduleSelfShipAppointment'
            );
        }
        // verify the required parameter 'slot_id' is set
        if ($slot_id === null || (is_array($slot_id) && count($slot_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slot_id when calling scheduleSelfShipAppointment'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots/{slotId}/schedule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }
        // path params
        if ($slot_id !== null) {
            $resourcePath = str_replace(
                '{' . 'slotId' . '}',
                ObjectSerializer::toPathValue($slot_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'POST', $httpBody);
    }

    /**
     * Operation setPackingInformation
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\SetPackingInformationRequest $body The body of the request to &#x60;setPackingInformation&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\SetPackingInformationResponse
     */
    public function setPackingInformation($body, $inbound_plan_id)
    {
        list($response) = $this->setPackingInformationWithHttpInfo($body, $inbound_plan_id);
        return $response;
    }

    /**
     * Operation setPackingInformationWithHttpInfo
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\SetPackingInformationRequest $body The body of the request to &#x60;setPackingInformation&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\SetPackingInformationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setPackingInformationWithHttpInfo($body, $inbound_plan_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\SetPackingInformationResponse';
        $request = $this->setPackingInformationRequest($body, $inbound_plan_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation setPackingInformationAsync
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\SetPackingInformationRequest $body The body of the request to &#x60;setPackingInformation&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setPackingInformationAsync($body, $inbound_plan_id)
    {
        return $this->setPackingInformationAsyncWithHttpInfo($body, $inbound_plan_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setPackingInformationAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\SetPackingInformationRequest $body The body of the request to &#x60;setPackingInformation&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setPackingInformationAsyncWithHttpInfo($body, $inbound_plan_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\SetPackingInformationResponse';
        $request = $this->setPackingInformationRequest($body, $inbound_plan_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'setPackingInformation'
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\SetPackingInformationRequest $body The body of the request to &#x60;setPackingInformation&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setPackingInformationRequest($body, $inbound_plan_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling setPackingInformation'
            );
        }
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling setPackingInformation'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'POST', $httpBody);
    }

    /**
     * Operation updateInboundPlanName
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateInboundPlanNameRequest $body The body of the request to &#x60;updateInboundPlanName&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateInboundPlanName($body, $inbound_plan_id)
    {
        $this->updateInboundPlanNameWithHttpInfo($body, $inbound_plan_id);
    }

    /**
     * Operation updateInboundPlanNameWithHttpInfo
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateInboundPlanNameRequest $body The body of the request to &#x60;updateInboundPlanName&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateInboundPlanNameWithHttpInfo($body, $inbound_plan_id)
    {
        $returnType = '';
        $request = $this->updateInboundPlanNameRequest($body, $inbound_plan_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation updateInboundPlanNameAsync
     *
     *
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateInboundPlanNameRequest $body The body of the request to &#x60;updateInboundPlanName&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInboundPlanNameAsync($body, $inbound_plan_id)
    {
        return $this->updateInboundPlanNameAsyncWithHttpInfo($body, $inbound_plan_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateInboundPlanNameAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateInboundPlanNameRequest $body The body of the request to &#x60;updateInboundPlanName&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInboundPlanNameAsyncWithHttpInfo($body, $inbound_plan_id)
    {
        $returnType = '';
        $request = $this->updateInboundPlanNameRequest($body, $inbound_plan_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'updateInboundPlanName'
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateInboundPlanNameRequest $body The body of the request to &#x60;updateInboundPlanName&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateInboundPlanNameRequest($body, $inbound_plan_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateInboundPlanName'
            );
        }
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling updateInboundPlanName'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'PUT', $httpBody);
    }

    /**
     * Operation updateItemComplianceDetails
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateItemComplianceDetailsRequest $body The body of the request to &#x60;updateItemComplianceDetails&#x60;. (required)
     * @param  string $marketplace_id The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateItemComplianceDetailsResponse
     */
    public function updateItemComplianceDetails($body, $marketplace_id)
    {
        list($response) = $this->updateItemComplianceDetailsWithHttpInfo($body, $marketplace_id);
        return $response;
    }

    /**
     * Operation updateItemComplianceDetailsWithHttpInfo
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateItemComplianceDetailsRequest $body The body of the request to &#x60;updateItemComplianceDetails&#x60;. (required)
     * @param  string $marketplace_id The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateItemComplianceDetailsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateItemComplianceDetailsWithHttpInfo($body, $marketplace_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateItemComplianceDetailsResponse';
        $request = $this->updateItemComplianceDetailsRequest($body, $marketplace_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation updateItemComplianceDetailsAsync
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateItemComplianceDetailsRequest $body The body of the request to &#x60;updateItemComplianceDetails&#x60;. (required)
     * @param  string $marketplace_id The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateItemComplianceDetailsAsync($body, $marketplace_id)
    {
        return $this->updateItemComplianceDetailsAsyncWithHttpInfo($body, $marketplace_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateItemComplianceDetailsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateItemComplianceDetailsRequest $body The body of the request to &#x60;updateItemComplianceDetails&#x60;. (required)
     * @param  string $marketplace_id The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateItemComplianceDetailsAsyncWithHttpInfo($body, $marketplace_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateItemComplianceDetailsResponse';
        $request = $this->updateItemComplianceDetailsRequest($body, $marketplace_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'updateItemComplianceDetails'
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateItemComplianceDetailsRequest $body The body of the request to &#x60;updateItemComplianceDetails&#x60;. (required)
     * @param  string $marketplace_id The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateItemComplianceDetailsRequest($body, $marketplace_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateItemComplianceDetails'
            );
        }
        // verify the required parameter 'marketplace_id' is set
        if ($marketplace_id === null || (is_array($marketplace_id) && count($marketplace_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_id when calling updateItemComplianceDetails'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/items/compliance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($marketplace_id !== null) {
            $queryParams['marketplaceId'] = ObjectSerializer::toQueryValue($marketplace_id, null);
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'PUT', $httpBody);
    }

    /**
     * Operation updateShipmentName
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentNameRequest $body The body of the request to &#x60;updateShipmentName&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateShipmentName($body, $inbound_plan_id, $shipment_id)
    {
        $this->updateShipmentNameWithHttpInfo($body, $inbound_plan_id, $shipment_id);
    }

    /**
     * Operation updateShipmentNameWithHttpInfo
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentNameRequest $body The body of the request to &#x60;updateShipmentName&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateShipmentNameWithHttpInfo($body, $inbound_plan_id, $shipment_id)
    {
        $returnType = '';
        $request = $this->updateShipmentNameRequest($body, $inbound_plan_id, $shipment_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation updateShipmentNameAsync
     *
     *
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentNameRequest $body The body of the request to &#x60;updateShipmentName&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShipmentNameAsync($body, $inbound_plan_id, $shipment_id)
    {
        return $this->updateShipmentNameAsyncWithHttpInfo($body, $inbound_plan_id, $shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateShipmentNameAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentNameRequest $body The body of the request to &#x60;updateShipmentName&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShipmentNameAsyncWithHttpInfo($body, $inbound_plan_id, $shipment_id)
    {
        $returnType = '';
        $request = $this->updateShipmentNameRequest($body, $inbound_plan_id, $shipment_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'updateShipmentName'
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentNameRequest $body The body of the request to &#x60;updateShipmentName&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateShipmentNameRequest($body, $inbound_plan_id, $shipment_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateShipmentName'
            );
        }
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling updateShipmentName'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling updateShipmentName'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'PUT', $httpBody);
    }

    /**
     * Operation updateShipmentSourceAddress
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentSourceAddressRequest $body The body of the request to &#x60;updateShipmentSourceAddress&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentSourceAddressResponse
     */
    public function updateShipmentSourceAddress($body, $inbound_plan_id, $shipment_id)
    {
        list($response) = $this->updateShipmentSourceAddressWithHttpInfo($body, $inbound_plan_id, $shipment_id);
        return $response;
    }

    /**
     * Operation updateShipmentSourceAddressWithHttpInfo
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentSourceAddressRequest $body The body of the request to &#x60;updateShipmentSourceAddress&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentSourceAddressResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateShipmentSourceAddressWithHttpInfo($body, $inbound_plan_id, $shipment_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentSourceAddressResponse';
        $request = $this->updateShipmentSourceAddressRequest($body, $inbound_plan_id, $shipment_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation updateShipmentSourceAddressAsync
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentSourceAddressRequest $body The body of the request to &#x60;updateShipmentSourceAddress&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShipmentSourceAddressAsync($body, $inbound_plan_id, $shipment_id)
    {
        return $this->updateShipmentSourceAddressAsyncWithHttpInfo($body, $inbound_plan_id, $shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateShipmentSourceAddressAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentSourceAddressRequest $body The body of the request to &#x60;updateShipmentSourceAddress&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShipmentSourceAddressAsyncWithHttpInfo($body, $inbound_plan_id, $shipment_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentSourceAddressResponse';
        $request = $this->updateShipmentSourceAddressRequest($body, $inbound_plan_id, $shipment_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'updateShipmentSourceAddress'
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentSourceAddressRequest $body The body of the request to &#x60;updateShipmentSourceAddress&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateShipmentSourceAddressRequest($body, $inbound_plan_id, $shipment_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateShipmentSourceAddress'
            );
        }
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling updateShipmentSourceAddress'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling updateShipmentSourceAddress'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/sourceAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'PUT', $httpBody);
    }

    /**
     * Operation updateShipmentTrackingDetails
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentTrackingDetailsRequest $body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentTrackingDetailsResponse
     */
    public function updateShipmentTrackingDetails($body, $inbound_plan_id, $shipment_id)
    {
        list($response) = $this->updateShipmentTrackingDetailsWithHttpInfo($body, $inbound_plan_id, $shipment_id);
        return $response;
    }

    /**
     * Operation updateShipmentTrackingDetailsWithHttpInfo
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentTrackingDetailsRequest $body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \Luigel\AmazonSellingPartnerAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentTrackingDetailsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateShipmentTrackingDetailsWithHttpInfo($body, $inbound_plan_id, $shipment_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentTrackingDetailsResponse';
        $request = $this->updateShipmentTrackingDetailsRequest($body, $inbound_plan_id, $shipment_id);

        return $this->sendRequest($request, $returnType);
    }

    /**
     * Operation updateShipmentTrackingDetailsAsync
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentTrackingDetailsRequest $body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShipmentTrackingDetailsAsync($body, $inbound_plan_id, $shipment_id)
    {
        return $this->updateShipmentTrackingDetailsAsyncWithHttpInfo($body, $inbound_plan_id, $shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateShipmentTrackingDetailsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentTrackingDetailsRequest $body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateShipmentTrackingDetailsAsyncWithHttpInfo($body, $inbound_plan_id, $shipment_id)
    {
        $returnType = '\Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentTrackingDetailsResponse';
        $request = $this->updateShipmentTrackingDetailsRequest($body, $inbound_plan_id, $shipment_id);

        return $this->sendRequestAsync($request, $returnType);
    }

    /**
     * Create request for operation 'updateShipmentTrackingDetails'
     *
     * @param  \Luigel\AmazonSellingPartnerAPI\Models\FulfillmentInbound\UpdateShipmentTrackingDetailsRequest $body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;. (required)
     * @param  string $inbound_plan_id Identifier of an inbound plan. (required)
     * @param  string $shipment_id Identifier of a shipment. A shipment contains the boxes and units being inbounded. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateShipmentTrackingDetailsRequest($body, $inbound_plan_id, $shipment_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateShipmentTrackingDetails'
            );
        }
        // verify the required parameter 'inbound_plan_id' is set
        if ($inbound_plan_id === null || (is_array($inbound_plan_id) && count($inbound_plan_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inbound_plan_id when calling updateShipmentTrackingDetails'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling updateShipmentTrackingDetails'
            );
        }

        $resourcePath = '/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/trackingDetails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($inbound_plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inboundPlanId' . '}',
                ObjectSerializer::toPathValue($inbound_plan_id),
                $resourcePath
            );
        }
        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        return $this->generateRequest($multipart, $formParams, $queryParams, $resourcePath, $headerParams, 'PUT', $httpBody);
    }
}
